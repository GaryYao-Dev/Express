1
00:00:00,000 --> 00:00:14,000
OK,没问题,我们还是照例等一下啊。

2
00:02:00,000 --> 00:02:15,000
OK,今天的同学好像没有以前那么多啊。没关系,我们今天就认识开始,欢迎大家来到我们最后一节react的课程,不知道同学们上完咱们的全站班之后有什么打算是准备投简历还是继续学习。

3
00:02:16,000 --> 00:02:25,000
最后一节课呢,大家同学们来看两个东西,一个是react routing,另外一个是hooks,大家来分享我的笔记品。

4
00:02:31,000 --> 00:02:32,000
你们稍等一下。

5
00:02:32,000 --> 00:02:47,000
OK,非常简单对吧,今天的大纲非常的精简,主要是两个内容,一个是react routing,另外一个是hooks。

6
00:02:48,000 --> 00:03:05,000
那么hooks的话,主要在大家见识一下use memo,use callback和use rank这三个,除了我们前面接触到的hooks以外最重要的这三个hooks,然后就是第一段的内容,我们一起来看一下react routing。

7
00:03:06,000 --> 00:03:25,000
react routing的话,拆成三个部分来看,第一个部分就是了解一下什么叫做simple page application,它跟multi-page application的区别在哪里,为什么我们要从multi-page application过渡到simple page application,然后第二个就是什么是routing,还有就是为什么会有routing的存在,没有routing的话会有哪些困扰。

8
00:03:26,000 --> 00:03:39,000
然后第三階段的话,就大同学们一起来实套,我们会起一个小的项目,然后把这个项目加上routing用的是reactrouterv6,也就是我们现在使用react最流行的routing工具没有之一。

9
00:03:39,000 --> 00:04:04,000
然后开始往下,我们来看一下simple page application,好,我们来看一下左边,是什么,是traditional,也就是我们multi-page application,它的特点是什么,every request for new information gives you a new version of the whole page,我们应该对这个比较传统的multi-page模式很熟悉吧,对吧?

10
00:04:04,000 --> 00:04:33,900
那么现在的话,我们去访问一些比较more than the websites,比如说咱们的react官方文档,可以注意到它的整个interaction是非常流畅的,对吧?并没有触发很多的patreon loading,这就是simple single page application,traditional page application是在每一次跳转页面的时候,或者说每一次进入一个new wrap的时候,会向后端去发送一个network request,

11
00:04:34,000 --> 00:04:44,500
并且会拽下来一个javascript,一个css和一个html一起来组成宣览,你们在request的那个界面,让我们来看一下lead,

12
00:04:45,500 --> 00:04:59,000
这里我随便去上一个网站,比如说malbenesgeneralconsole it,

13
00:05:00,000 --> 00:05:19,000
在图媒可以看一下,一定是一个非常远古的layout和UI设计就可以拆出来,一定是个非常老的网站,那这里的话我点一下all,不然的话就只能看到hp新久了。

14
00:05:19,000 --> 00:05:41,000
好的,这里的话,比如说我再进入一个新的界面,比如说aboutus,再来一遍,是v3的trouble,

15
00:05:49,000 --> 00:06:18,000
这个是对应的吧,大家可以看到了,是吧,这里的话跟我们左边的页面是对应的,是吧,也就是说在这一次请求的时候,我们虽然在wrap当中跳转到了一个新页面,但是它不得不向后端去发送一个请求,对吧,去拿一个html,去拿一个css,并且去拿一个javascript一起组合来宣览成我们最终看到的这个效果,

16
00:06:19,000 --> 00:06:42,000
而这里我们可以点不同的route,最终你们都会发现它每一次都会向后面去拿一个请求,并且宣览出一个东西,比如说这里的events.html,在这里就一定能搜到events.html,

17
00:06:43,000 --> 00:06:56,000
我们没有在讲hss,我们在讲multi-page application和single-page application的区别,跟server start rendering没有关系,

18
00:06:57,000 --> 00:07:19,000
大家能不能了解一下,是吧,这就是传统的一个multi-page application,每一次我们在跳route的时候换转页面的时候都会向后面去发送一个请求,然后这个请求会回来一个html,一个css,一个javascript,然后一起来重新宣览一下这一个页面,好,那我们再看一下,比如说react,

19
00:07:20,000 --> 00:07:28,000
官方文档,在这里用一样的套路,

20
00:07:28,000 --> 00:07:50,000
刷首次在宣览页面的时候一定会download下来一个非常巨大的javascript,有不知道在哪里,可能是这个吧,然后这个javascript其实就是什么,就是咱们react app最终全部打包,转移,并且bundle到一起的一个版本,

21
00:07:51,000 --> 00:08:03,000
然后把这一个javascript拿下来之后,你页面里面的所有routing,所有的components的排列组合的逻辑其实就全部写在这一个javascript里面,然后之后我们再做任何的跳转,

22
00:08:03,000 --> 00:08:16,000
对吧,我们是有一堆json化的,但是不会再看到什么,不会再看到html,css和javascript,是这个意思吧,

23
00:08:16,000 --> 00:08:28,000
是吧,那从现在的任何一个routes的跳转其实是什么,相当于是组进了一个排列组和一些hgp,就是后端的json data的一些交互,

24
00:08:29,000 --> 00:08:36,000
我们有没有明白这个意思吗,我们再回到笔记当中,

25
00:08:38,000 --> 00:08:48,000
那么可以看到是吧,总结一下就是traditional或者是multi-page application, every request for new info gives you a new version of the whole page,没有问题吧,

26
00:08:49,000 --> 00:08:59,000
然后它的pros and cons分别是首先highly scalable,这么有问题吧,对吧,我们可以说比如说setup多个team,然后同时去开发多个页面,

27
00:09:00,000 --> 00:09:10,000
对吧,然后以后在网站上,如果想去加更多的新功能,更多的新页面的话,就可以是吧,就可以直接去现成了加新的request,加新的html,

28
00:09:11,000 --> 00:09:22,000
然后incroved SEO,search engine optimization,这点怎么说呢,主要是因为SEO的设计其实是什么,是比较之后的是吧,那么做single page application也可以做incroved SEO,

29
00:09:23,000 --> 00:09:35,000
但是的话呢,它的难度会比传统的multi-page application要略高一些,然后这三个就是google analytics,那google analytics也是一样,跟incroved search engine optimization是类似的,

30
00:09:35,000 --> 00:09:45,000
对吧,它的优化是比较之后针对于multi-page application,然后确定很明显是吧,第一个就是slow performance,没问题吧,

31
00:09:46,000 --> 00:09:56,000
因为每一次跳转页面的时候你都需要向后装去发送请求,那么网络环境的话会造成一个performance issue,然后第二个就是more depth effort,那这也没问题吧,是吧,

32
00:09:56,000 --> 00:10:10,000
因为你想在各个page之间去分享一些common time phase的话变得比较难,对不对,然后最后一个就是hustle maintain,这是当然的,因为我们会有这么多的hdml,这么多的css和这么多的javascript一起去维护,对吧,

33
00:10:12,000 --> 00:10:25,000
然后再来看一下single page application,your request is just the piece you need,是吧,甚至我们刚刚所见它是什么,它是在初次宣览的时候,就会把整个app所需要的所有内容一次抓下来,是吧,

34
00:10:27,000 --> 00:10:49,000
然后之后在app里面的所有revolting其实就是什么,就是相当于组件之间的排列组合,是吧,虽然我们看上去的感觉上是跳上了一个新页面,它其实就是组件的排列组合,那么这个排列组合和Rotten的逻辑呢都是写在咱们的代码当中,然后会被转移,封包,然后minimize,最后变成一个bundle,被咱们的一个网络请求直接摔散,

35
00:10:49,000 --> 00:11:18,000
那么显然一件优点是什么,第一个是fast performance,相比较于traditional multi-page application来说,然后第二个是data caching,这个很好的理解是吧,比如说咱们在第一次发送请求成功获得responsive之后,咱们理论上就拥有了需要渲染在一个app的所有东西,那么之后哪怕你的网络断掉了,起码我能用已经发泄下来的java script帮你去做一个帮助,

36
00:11:19,000 --> 00:11:48,000
哎,这没有问题吧,对吧,然后最后就是fast debugging,为什么,因为这里的勇于很明显就减少了吧,对吧,那咱们的dev effort是不是也就减少了呀,对吧,那咱们的debugging,maintaining,等等等等,一切的这些after就全部都减少了吧,然后它的conc就是更难去做search engine optimization,对吧,然后就是你的java script need is all the time,比如说咱们在传统的,

37
00:11:49,000 --> 00:12:17,000
multi-page application当中,如果java script and css挂了,起码你还有一个HTML,能显示你这一个网页或者是app中想要显示的所有内容,对吧,只是没有starling和没有用户交互,但是如果在咱们的reactive当中,那没有java script的话,基本上就是什么都没有了,因为咱们是严重依赖java script去完成一个页面的渲染和组件之间的排列组合和routing,没有问题吧,

38
00:12:19,000 --> 00:12:48,000
那么接下来什么是routing,对吧,什么是routing,最直观的来看的话,同学们可以通过两种方式来跳转页面,第一种是通过在上一个页面当中的某一个java script的操作,比如说unclick某一个button,unclick某一个angle,对吧,或者是执行了某一个操作,一定是user event触发,结果导致了routing,对吧,

39
00:12:48,000 --> 00:13:18,000
导致了routing的转换,咱们从一个page跳转到另一个page,显而易见的是我们看到的东西发生了变化,比如说我们来看这张图的中间部分,紫色跟黄色相比,是吧,咱们看到的页面visual effects发生了变化,然后就是url input在browser上面,the value发生变化,比如说如果从slash welcome跳到slash products的话,它的指挥发生变化,domain当然可能是input在browser上面,the value发生变化,比如说如果从slash welcome跳到slash products的话,它的指挥发生变化,domain当然可能是input在browser上面,the value发生变化,比如说如果从slash welcome跳到slash products的话,它的指挥发生变化,dom

40
00:13:18,000 --> 00:13:42,500
同样的,但是后面的rout会发生变化,对吧,然后在传统的multi-page application当中,咱们的请求的hdml页面也会发生变化,对吧,比如说在welcome的rout当中,咱们渲染的是welcome.hdml,在protox当中咱们渲染的是protox.hdml,

41
00:13:48,000 --> 00:14:02,000
没问题吧,所以在traditional multi-page application当中,page change等于new request加上response,routing is handled by network request slash response,没问题吧。

42
00:14:06,000 --> 00:14:17,000
好,咱们再来看一下在single page application当中,routing是如何改变的,先第一点是吧,我们先看下面是吧,我写了一个中文的假字,对吧,它其实是一个假routing,

43
00:14:19,000 --> 00:14:43,000
为什么说它是一个假routing,因为咱们并没有像上一个,这张图一样发生种种的一切,没问题吧,咱们虽然是rout的转换,但是并没有发送任何的网络请求,或者说没有通过network来处理咱们的routing请求,是吧,那咱们的rout是如何实现的,

44
00:14:44,000 --> 00:14:53,000
哎,是通过components的牌子,每一个rout对应了一个component,而这个component可能是consist of many other components,对吧,

45
00:14:54,000 --> 00:15:06,000
所以when building complex user interfaces, we typically build single page application, only when initial HTML request and response,好,这里的response是什么,是一个非常大的,

46
00:15:06,000 --> 00:15:22,000
帮到过之后,转移过之后,minimize之后的js,然后page changes are then handled by client side,这也很好理解,是吧,咱们的所有routing逻辑是写在前端代码里面,是吧,

47
00:15:23,000 --> 00:15:30,000
因为咱们最终的结果是控制组件的排列组合,是吧,来控制你要宣览什么样的组件,或者说什么样的一堆组件,

48
00:15:30,000 --> 00:15:54,000
所以change of route doesn't trigger network request,rout对应组件们的排列组合,handled by javascript,那怎么样明白这个区别,是吧,一个是handled by javascript在咱们的single page application当中,另外一个是handled by the network request,

49
00:16:01,000 --> 00:16:10,000
为什么会有routing的存在啊,对吗,你觉得routing有什么好处,

50
00:16:10,000 --> 00:16:25,000
没有存在给我回应吗,把routing有什么好处,

51
00:16:41,000 --> 00:16:50,000
首先第一个好处是可以通过routing直接跳到你想要的某一个app的state,没有问题吧,

52
00:16:51,000 --> 00:17:03,000
如果没有routing的话,我们要怎么办,我们从初始的页面开始一步一步点,对吧,但是有了routing之后它的每一个state,我们都可以给它pay a route,是不是,

53
00:17:04,000 --> 00:17:21,000
然后UIL是可以被这些复制并且分享来用的,没有问题吧,尤其咱们在建什么,咱们在建2C的webapp的时候routing一定是一个必须的东西,可以想象一下我们目前所创建的所有app没有一个是在routing的,

54
00:17:22,000 --> 00:17:45,000
那么如果我们想要跳转到app当中的某一个阶段,或者说某一个state,或者说某一个view,怎么办,咱们只能通过初始状态,然后在里面用手点,点到那个state,或者说让它一步一步进行到那样的state,

55
00:17:46,000 --> 00:18:00,000
那如果有了routing之外之后,咱们可以通过routing直接回车,是吧,直接跳转过去,好,我们来看一下今天的第一个task,

56
00:18:00,000 --> 00:18:12,000
OK,在这里的话,我有一个非常简单的app,我这里先重复一下,我去npms码一下。

57
00:18:30,000 --> 00:18:32,000
谢谢。

58
00:19:00,000 --> 00:19:29,000
OK,搞定之后,咱们npms码一下。

59
00:19:30,000 --> 00:19:49,000
OK,看到其实没有任何的内容,对吧,我们来顺便看一下的一个app,那是空的,这里只悬栏了一个emptive,然后这里唯一有的内容其实就是一些非常简单的style,没问题吧,

60
00:19:49,000 --> 00:19:55,000
那它相当于适应什么,相当于是一个空的项目,我们来在这里加上routing,顺便来看一下要怎么学习routing。

61
00:19:58,000 --> 00:20:02,000
它第一步,在这里reactrouter。

62
00:20:03,000 --> 00:20:22,000
这是咱们用react的时候所用的router,是一个plugin,咱们这里可以直接安装它,npms installreactrouter。

63
00:20:22,000 --> 00:20:36,000
安装完毕之后,咱们可以在app里逛建一个rout,create。

64
00:20:36,000 --> 00:20:53,000
等一下,看一下有没有装上去,是有的。

65
00:20:53,000 --> 00:21:08,000
然后是有的。

66
00:21:08,000 --> 00:21:15,000
然后是react。

67
00:21:15,000 --> 00:21:27,000
应该装成reactrouter.应该是install然后reactrouter,应该是这个东西。

68
00:21:27,000 --> 00:21:34,000
OK,然后咱们现在应该有autocomplete,create browserrouter,对,是这个东西。

69
00:21:35,000 --> 00:21:42,000
browserrouter,然后这里面我们会接受一个参数,是一个array,然后在这个array里面,咱们可以打上咱们想的rout。

70
00:21:42,000 --> 00:22:00,000
比如说每一个rout的格式是有一个path,然后有一个element,很显然这个element是什么,是当我们到达这个rout之后需要宣兰的组件,

71
00:22:00,000 --> 00:22:11,000
咱们现在这里什么都没有,我们给它写一个return叫做pages的一个file的,可以写一个比如说home.js,

72
00:22:12,000 --> 00:22:33,000
而且的话直接consthome,return一个runsbrow result,这里咱们可以简单的写一个heche,

73
00:22:33,000 --> 00:23:00,000
然后myhomepage,没问题吧,然后在这里的话,当我们到达root的时候,宣兰后,就是最简单的一个rout,完成之后咱们还要把它创建出来的rout给它接住。

74
00:23:03,000 --> 00:23:19,000
然后咱们在app里可以用rout,我们应该对这个path非常熟悉了吧,是吧,相当于一个什么,contextprovide是这个意思吧。

75
00:23:20,000 --> 00:23:28,000
到这里把rout装上去,好像的一个setup基本上就完成了,然后咱们npm run start,

76
00:23:29,000 --> 00:23:43,000
可以看到myhomepage,没问题吧,是吧,这里的slash代表什么呀,代表root,是吧,跟它是一样的,这是意思吧。

77
00:23:44,000 --> 00:23:56,000
咱们再给大家一个rout,粘贴复制前面的内容,products,这里咱们再给它写一个products page,

78
00:23:56,000 --> 00:24:25,000
然后这里一样const,再放大一点,products应该是大写的p,等于,这里一样,咱们也写一个he,非常的简单,myproducts,

79
00:24:27,000 --> 00:24:47,000
page,export,default,products,好,回到这里,可以把它改成products,回到这里,咱们再给它跳转,咱们可以看到是吧,这是最最最简单的一个rout。

80
00:24:48,000 --> 00:25:08,000
除此之外,我们再用reactrout的时候,还有一个alternative的写法,除了写成这样,咱们还有一种写成gs的写法,const,这里给它一个新的定义,叫做rout, alternative,

81
00:25:08,000 --> 00:25:29,000
等于reactrout from elements,那么这里的话就不再是接收一个arrig,而是接收一个gsx,所以我们通常是放rout,然后在里面相欠上更多的rout,

82
00:25:29,000 --> 00:25:44,000
然后去到,应该是一个self-closing pack,在里面的话,我们一样放上path,然后element,然后这里的element就是hold,

83
00:25:59,000 --> 00:26:18,000
然后把它,应该是把它注释的,咱们还是需要thread,browse-routed,就是ruth,then create,browse-routed,不过这里咱们可以把route放进去,

84
00:26:18,000 --> 00:26:44,000
那我可以看到结果是什么,是一样的,对吧,是一样的一个效果,两种用法没有谁好谁不好,我们看自己的项目,或者是自己的需求和自己的编号可以用,那么在我们今天的区计当中,我就用之前的那种方法,我打句要注释掉吧,

85
00:26:48,000 --> 00:27:09,000
这就是setup of single routing,非常简单,然后我们再看一下,假如现在有一个新的需求,我希望通过,

86
00:27:10,000 --> 00:27:27,000
点击angle的形式,点击link的形式从home page跳转到product page要怎么办,我们可以在home page里面首先先写一个button,或者说写一个angle,

87
00:27:27,000 --> 00:27:56,000
所以我们直接写一个angle,就是p,go back to at least of prothats,那没有问题吧,

88
00:27:57,000 --> 00:28:10,000
那用我们现在已经学到的知识要怎么写,怎么可以给它写一个route,没有问题吧,对吧,然后route里面怎么可以放上prothats,也可以左达到route的效果,

89
00:28:10,000 --> 00:28:21,000
我们回来看一下,是可以的,对吧,route成功跳转也是我想要的宣传出来的组件,那同学有没有看到什么问题啊,对吧,我在点它的时候,

90
00:28:21,000 --> 00:28:34,000
这个icon会进行refresh,说明什么啊,说明我在进行refresh是吧,我的refresh整个app,

91
00:28:34,000 --> 00:28:48,000
那么在react routing到里面,咱们有个方法可以规避到这个问题,怎么可以用它提供给我们的wrapper component,叫做link,

92
00:28:48,000 --> 00:29:07,000
然后咱们在link里的 attribute叫做to,然后下来我们来看一下,回到游览机当中,那同学可以注意到我们也进行了一个routing的跳转,只不过这一次它并没有refresh我的app,

93
00:29:18,000 --> 00:29:45,000
哎,没问题吧,OK,好,接下来,我们来加一些内容,在这里我再创建一个directory,这里我写一个main pattern,

94
00:29:48,000 --> 00:30:07,000
Cut the main header thing,x-fault,d-fault,main header,

95
00:30:19,000 --> 00:30:42,000
很明显在这里的话,我说写一个head,我们可以写一个head,head底下,报一个nav,nav里面怎么给它租angles,一组link,

96
00:30:43,000 --> 00:31:08,000
问题吧,我们给,然后粘贴复制,这里的话第一个是home,第二个是products,OK,好,下面的问题是什么,

97
00:31:09,000 --> 00:31:19,000
哎,不管是在products配件当中还是home配件当中,哪怕是我们未来所加入的更多配件当中,我想把main header渲染在上面,

98
00:31:20,000 --> 00:31:37,000
我们的第一个显而易的做法是什么,哎,在这里加账它,对吧,可是这样的问题是什么呀,咱们随着页面的增加,我们需要重复的把这个代码给它打上去,很显然不是一个好的practice,

99
00:31:38,000 --> 00:31:45,000
那万一以后main header的用法变了怎么办,那咱们还得去每一个配件当中去更新它的用法,对吧,

100
00:31:45,000 --> 00:32:11,000
哎,这里我们来介绍一个方法,好,回到app当中,哎,这里我们可以nesting route,在我们的part,在我们的route object当中,第三个东西叫做children,

101
00:32:12,000 --> 00:32:14,000
它一样也是一个array,

102
00:32:21,000 --> 00:32:24,000
这里的话我们可以放上一模一样的route object,

103
00:32:24,000 --> 00:32:47,000
然后我把home移到下面,那么上面这里的话,我可以给它放一个什么,相当于一个layout一样的component,对吧,

104
00:32:48,000 --> 00:32:51,000
我们先把下面这个写完,好吧,

105
00:33:02,000 --> 00:33:09,000
好,咱们再来给它写一个layout,在page的sauce里面,直接在page里面写吧,

106
00:33:09,000 --> 00:33:19,000
一个main,layout.js,

107
00:33:39,000 --> 00:33:57,000
好,这里显然第一个我要包进去的是main header是吧,这是我为啥创建main layout的初衷,

108
00:33:58,000 --> 00:34:08,000
接下来呢,哎,接下来咱们需要什么,咱们需要把zroute做mapping的component给它mount到里面,对不对,

109
00:34:11,000 --> 00:34:19,000
这里我先给它写一个rapmain,然后在里面咱们可以用上一个特殊的东西,

110
00:34:28,000 --> 00:34:40,000
叫做outlet,哎,这个outlet相当于什么,相当于一个placeholder,

111
00:34:45,000 --> 00:34:53,000
我们先回去,回到app当中来,然后把最上面的foo上面的element把它替换成main layout,

112
00:34:54,000 --> 00:35:01,000
好,我们来看一下这样的一个routing的definition是什么意思,是吧,首先它是foo,

113
00:35:04,000 --> 00:35:09,000
那么在下面的所有zroute当中,上面的fooelement一定都会选择,

114
00:35:10,000 --> 00:35:19,000
没问题吧,对吧,不管下面到达哪一个path,到达哪一个route,

115
00:35:20,000 --> 00:35:29,000
所以上面foo集route的element都会被选择,然后因为咱们在main layout里面定义了一个outlet,

116
00:35:30,000 --> 00:35:42,000
那么在下面第二级的所有route当中,它们所相对应的element或者是component就会被mount到outlet的位置,

117
00:35:43,000 --> 00:35:56,000
没问题吧,我们来看一下,对吧,没问题吧,

118
00:35:58,000 --> 00:36:06,000
下面我们来完善一下它的内容,在这里的好像给它加上一些style里,在main header里,

119
00:36:13,000 --> 00:36:21,000
打成这个cssmain header module.css,

120
00:36:26,000 --> 00:36:30,000
不准接,粘贴不准接,是不需要好的css,

121
00:36:30,000 --> 00:36:36,000
不准接,

122
00:37:00,000 --> 00:37:13,000
然后把这里的内容给它提发成什么,提发成怎么刚刚学的link,

123
00:37:30,000 --> 00:37:46,000
这里咱们再给它一个toot,这里的话home是去哪里,home是去咱们的route,

124
00:37:48,000 --> 00:37:52,000
然后products是去咱们的slash,products,

125
00:37:53,000 --> 00:38:03,000
再来看一下,对吧,工作的吧,没问题吧,

126
00:38:03,000 --> 00:38:21,000
咱们再来看一下layout,layout当中咱们也可以style一下这里的dig是吧,main content让它跟我们的nation对齐,

127
00:38:22,000 --> 00:38:34,000
这里一样,写一个mainlayout点module点css,

128
00:38:46,000 --> 00:38:47,000
content,

129
00:38:52,000 --> 00:38:59,000
margin torem,然后lout,让它做一个左右对齐,然后咱们的txtalign,

130
00:39:02,000 --> 00:39:05,000
回到这里咱们import它,

131
00:39:06,000 --> 00:39:08,000
class classes from

132
00:39:08,000 --> 00:39:26,000
class names and classes content,我来看一下,比之前看起来好多了对吧,

133
00:39:39,000 --> 00:39:53,000
没问题吧,好,接下来如果咱们随便输一个比如说product,写成product,

134
00:39:54,000 --> 00:40:02,000
我没看到这里出一个什么,相当于一个faofo对吧,相当于一个defaultfaofo,是reactrouter给我的一个faofo,

135
00:40:03,000 --> 00:40:07,000
还没问题吧,咱们可以自己给它写一个自定义的faofo,

136
00:40:23,000 --> 00:40:47,000
这里随便给一些内容,比如说这里我们一定还是得给上main,head对吧,我们一会再来讲为什么在这样的情况下咱们要把它写上去,

137
00:40:47,000 --> 00:40:54,000
不能用我们刚刚nesting route的特性,一会再讲,我们先把它写上去,然后下面放一个main,

138
00:40:58,000 --> 00:41:04,000
这里我会来借用一下我刚刚写的mainlayout里面的css,

139
00:41:10,000 --> 00:41:11,000
这里一样我直接用上,

140
00:41:12,000 --> 00:41:18,000
content,首先给它写一个h1,

141
00:41:20,000 --> 00:41:21,000
h0,

142
00:41:27,000 --> 00:41:35,000
sorry we can find the page you requested,

143
00:41:36,000 --> 00:41:54,000
没问题吧,怎么要用它,怎么要去用它,我们可以回到app当中来,在这里我们可以发现其实除了咱们现在已经用到的path element和chosen之外,它还有一个东西,

144
00:41:55,000 --> 00:41:56,000
这里有提示,看见没有,

145
00:42:02,000 --> 00:42:07,000
咱们这里可以用arrow boundary或者是arrow element,我们这里先用arrow element,

146
00:42:07,000 --> 00:42:30,000
这里因为我把它定义在path element的区别,所以在每一个stuff load当中,如果发生了fall fall,或者是发生了fall fall,而它又没有自己的arrow element的话,

147
00:42:31,000 --> 00:42:43,000
这一个区域就会bubble up,直到发现arrow element为止,因为说在这里我们相当于是给这些route了一个什么统一的一个arrow handling,或者是fall fall arrow,没问题吧,

148
00:42:44,000 --> 00:42:57,000
如果我们再来这,page not found,可以看见,这意思吧,那事实上只要是在slash底下的所有的sabra,不管你打什么,都会悬案出这样的一个arrow page,

149
00:43:00,000 --> 00:43:17,000
OK,好,接下来我们再看一个问题,

150
00:43:17,000 --> 00:43:46,000
main header当中,咱们是可以通过点击这些nive items来进行页面的调转,是如何来标记一个isactive styling,比如说现在我的route是products,

151
00:43:47,000 --> 00:43:58,000
我希望product item,product nav item有一个特别的style,来indicate现在它是我选中的route,或者是nive item,再怎么做。

152
00:44:18,000 --> 00:44:28,000
把我这里一举select,你们还记得吗,在最早最早之前的个指当中,这里有hover,active,

153
00:44:29,000 --> 00:44:38,000
但是问题是如何来判断现在哪一个element跟我的route是相对应的,竟然可以对它进行一些特殊的style,

154
00:44:39,000 --> 00:44:42,000
这里给我们介绍另外一个新的component,

155
00:44:42,000 --> 00:45:05,000
nive link和link基本上一样,

156
00:45:06,000 --> 00:45:31,000
除了在classname上,一般的classname,咱们是放extreme,但是在这里咱们的classname是一个function,

157
00:45:32,000 --> 00:45:45,000
而且function里面会给我们传参数,一个是isactive,一个是ispending,我们这里用不到ispending,咱们需要isactive,

158
00:45:45,000 --> 00:45:51,000
之后咱们就可以通过isactive来给它进行一个特殊判断,或者加一个特殊style,

159
00:45:51,000 --> 00:46:02,000
如果是isactive的话,咱们可以做classes.active,否则空,这里也是一样,

160
00:46:06,000 --> 00:46:13,000
如果active,classes.active,否则空,

161
00:46:14,000 --> 00:46:24,000
之后咱们再回来,咱们看见是吧,现在已经出了效果,也就是说当我们到不同的route的时候,由于这里的nive link的运用,

162
00:46:24,000 --> 00:46:33,000
它会帮我们做一个mapping,对吧,它会告诉我们目前哪一个nive link是被选中的,或者说你目前的route对应了哪一个nive link,

163
00:46:34,000 --> 00:46:44,000
然后咱们可以通过它传给我们的isactive参数来对这一个nive link进行一个特殊化处理,比如说在这里,咱们的特殊化处理是什么,是style,对吧,

164
00:47:00,000 --> 00:47:01,000
没问题吧,

165
00:47:04,000 --> 00:47:09,000
好,这里在home page当中,

166
00:47:13,000 --> 00:47:15,000
我们再加一个东西,

167
00:47:17,000 --> 00:47:18,000
这是我们加一个bottom,

168
00:47:21,000 --> 00:47:23,000
我们再加一个about页面,

169
00:47:33,000 --> 00:47:57,000
这里一样,我只放一个he by about page,

170
00:47:58,000 --> 00:48:11,000
而这里我的目的是通过点击一个bottom,我想让它跳转到about页面当中,首先第一步是什么,第一步怎么肯定得把这个route给它加上去,对不对,

171
00:48:14,000 --> 00:48:15,000
咱们在这里可以加一个about,

172
00:48:15,000 --> 00:48:27,000
下面的问题是如何在程序当中来进行跳转,

173
00:48:30,000 --> 00:48:33,000
因为它不是一个link,它也不是一个nive link,它不是一个angle,

174
00:48:45,000 --> 00:48:47,000
再给同学们介绍一个新的东西,

175
00:48:49,000 --> 00:48:54,000
我们可以用navigate从usenavigate里直接获取,

176
00:48:54,000 --> 00:49:19,000
咱们看见没有,对吧,没问题吧,咱们再把这个main header给它完善一下,

177
00:49:20,000 --> 00:49:21,000
这里多加一个n tree,

178
00:49:30,000 --> 00:49:31,000
没问题吧,

179
00:49:31,000 --> 00:49:47,000
今天我们reactrouting的大部分内容,好,最后再提一个东西,

180
00:49:48,000 --> 00:49:58,000
the act这里,如果我加一个东西在上面,比如route,保存,

181
00:49:59,000 --> 00:50:00,000
他们认为会发生什么,

182
00:50:03,000 --> 00:50:06,000
把这牵扯到absolute和relative path,

183
00:50:08,000 --> 00:50:09,000
把他们看一下会发生什么,

184
00:50:10,000 --> 00:50:11,000
回过来,

185
00:50:14,000 --> 00:50:16,000
看见没有,这里有错误是吧,直接给我报错,

186
00:50:17,000 --> 00:50:24,000
错误是什么,absolute route path slash nested under path slash route is not valid,

187
00:50:25,000 --> 00:50:33,000
咱们这里只要是forward slash开头的所有path都叫什么,

188
00:50:34,000 --> 00:50:36,000
都叫absolute path,没问题吧,

189
00:50:39,000 --> 00:50:40,000
对吧,

190
00:50:41,000 --> 00:50:50,000
那么既然我们定义了这些route或者说这些path是slashroute的chosen,

191
00:50:51,000 --> 00:50:57,000
那么这里如果想用absolute path的话,一定是什么,route开头吧,

192
00:50:58,000 --> 00:51:01,000
对不对,一定是route开头,一定是route开头,

193
00:51:08,000 --> 00:51:09,000
看一下是不是这意思,

194
00:51:10,000 --> 00:51:12,000
一定是route开头,我的link还没有修,

195
00:51:12,000 --> 00:51:22,000
那么问题来了,随着我项目的复杂度增加,

196
00:51:23,000 --> 00:51:25,000
pages的数量增加,

197
00:51:26,000 --> 00:51:27,000
我的nesting越来越多,

198
00:51:28,000 --> 00:51:30,000
如果我用absolute path的话,

199
00:51:31,000 --> 00:51:32,000
会不会导致这个path越来越难写,

200
00:51:33,000 --> 00:51:34,000
对吧,

201
00:51:35,000 --> 00:51:36,000
所以在这种情况下,我们要用什么,

202
00:51:37,000 --> 00:51:39,000
我们可以用relative path,

203
00:51:40,000 --> 00:51:41,000
对吧,

204
00:51:42,000 --> 00:51:43,000
比如说这里我放空,

205
00:51:44,000 --> 00:51:46,000
这里我把前面的鞋杠去掉,

206
00:51:47,000 --> 00:51:48,000
这里我也把前面给它去掉,

207
00:51:50,000 --> 00:51:51,000
我们再回来,

208
00:51:54,000 --> 00:51:55,000
就没问题了吧,

209
00:51:57,000 --> 00:51:58,000
products,

210
00:52:00,000 --> 00:52:02,000
是吧,在头面看到这个意思吗,

211
00:52:05,000 --> 00:52:06,000
我们要注意一下,

212
00:52:07,000 --> 00:52:09,000
在用absolute path和relative path的时候,

213
00:52:10,000 --> 00:52:11,000
有这个区别要注意一下,

214
00:52:13,000 --> 00:52:14,000
而且我们可以把它也干掉,

215
00:52:17,000 --> 00:52:20,000
and我们的项目应该是跟之前的工作是没有任何问题的,对吧,

216
00:52:29,000 --> 00:52:31,000
好,目前位置同样没有什么问题吗,

217
00:52:42,000 --> 00:52:44,000
relative path还是很简单的,对吧,

218
00:52:47,000 --> 00:52:48,000
是问题,

219
00:52:49,000 --> 00:52:50,000
第一个是,

220
00:52:51,000 --> 00:52:53,000
就像刚才的relative path和absolute path当中,

221
00:52:54,000 --> 00:52:55,000
如果我在link当中使用的时候,

222
00:52:56,000 --> 00:52:57,000
也是一样的,

223
00:52:58,000 --> 00:52:59,000
比如说,

224
00:53:00,000 --> 00:53:01,000
我是到main header里面,

225
00:53:02,000 --> 00:53:03,000
也是一样的,

226
00:53:04,000 --> 00:53:05,000
但我可以不写这个,

227
00:53:06,000 --> 00:53:07,000
写更,

228
00:53:08,000 --> 00:53:09,000
就是第一个,

229
00:53:10,000 --> 00:53:11,000
非常好的问题,

230
00:53:12,000 --> 00:53:13,000
第一个应该是不行,

231
00:53:13,000 --> 00:53:14,000
应该是得写一个吧,

232
00:53:15,000 --> 00:53:16,000
应该试一下,

233
00:53:17,000 --> 00:53:18,000
也是可以的,

234
00:53:19,000 --> 00:53:20,000
也是可以的,

235
00:53:20,000 --> 00:53:21,000
好,这里要注意一个点,

236
00:53:23,000 --> 00:53:24,000
就是你看这里的relative是,

237
00:53:24,000 --> 00:53:25,000
relative是谁,

238
00:53:26,000 --> 00:53:27,000
思考下的问题,

239
00:53:28,000 --> 00:53:29,000
是吧,

240
00:53:29,000 --> 00:53:31,000
这里的relative是relative到谁,

241
00:53:34,000 --> 00:53:35,000
relative down,

242
00:53:36,000 --> 00:53:37,000
downward,

243
00:53:37,000 --> 00:53:38,000
对不对,

244
00:53:38,000 --> 00:53:39,000
或者是当前的path,

245
00:53:39,000 --> 00:53:40,000
没问题吧,

246
00:53:40,000 --> 00:53:42,000
那当我们圈览出main header的时候,

247
00:53:43,000 --> 00:53:44,000
那么我们当前的path是谁,

248
00:53:47,000 --> 00:53:48,000
就是写更,

249
00:53:49,000 --> 00:53:50,000
对吧,

250
00:53:50,000 --> 00:53:51,000
如果这里说你什么都不放,

251
00:53:52,000 --> 00:53:53,000
它会到哪里,

252
00:53:53,000 --> 00:53:54,000
会到后,

253
00:53:55,000 --> 00:53:56,000
就没问题吧,

254
00:53:57,000 --> 00:53:58,000
什么都不放,

255
00:53:58,000 --> 00:53:59,000
它会在当前的path后面,

256
00:53:59,000 --> 00:54:01,000
append一个products给你,

257
00:54:01,000 --> 00:54:02,000
对吧,

258
00:54:03,000 --> 00:54:04,000
所以导致它变成这样,

259
00:54:04,000 --> 00:54:06,000
然后about也是一样的,

260
00:54:11,000 --> 00:54:12,000
I'm gonna ask this one,

261
00:54:13,000 --> 00:54:14,000
OK,

262
00:54:19,000 --> 00:54:20,000
我刚才说了,

263
00:54:20,000 --> 00:54:21,000
是的时候有一个,

264
00:54:21,000 --> 00:54:22,000
有一个什么特别的案例,

265
00:54:22,000 --> 00:54:23,000
我抱错了,

266
00:54:24,000 --> 00:54:25,000
如果在前面,

267
00:54:26,000 --> 00:54:27,000
create route,

268
00:54:27,000 --> 00:54:28,000
route的时候,

269
00:54:28,000 --> 00:54:29,000
就不给,

270
00:54:29,000 --> 00:54:30,000
很康的,

271
00:54:32,000 --> 00:54:33,000
create route的时候,

272
00:54:33,000 --> 00:54:34,000
你这里是可以不给,

273
00:54:34,000 --> 00:54:35,000
很高,

274
00:54:35,000 --> 00:54:36,000
这里是相当于一个index route,

275
00:54:36,000 --> 00:54:37,000
其实,

276
00:54:41,000 --> 00:54:42,000
嗯,

277
00:54:42,000 --> 00:54:43,000
什么意思呢,

278
00:54:44,000 --> 00:54:45,000
有相当于在这里,

279
00:54:48,000 --> 00:54:49,000
它的home route是它,

280
00:54:49,000 --> 00:54:50,000
是吧,

281
00:54:50,000 --> 00:54:51,000
相对应的是它,

282
00:54:51,000 --> 00:54:52,000
是这个意思,

283
00:54:52,000 --> 00:54:54,000
一般我们的用法是什么,

284
00:54:54,000 --> 00:54:56,000
我们在副上面,

285
00:54:56,000 --> 00:54:57,000
给它放一个layout,

286
00:54:57,000 --> 00:54:58,000
因为这个layout咱们都需要,

287
00:54:58,000 --> 00:54:59,000
比如说head,

288
00:54:59,000 --> 00:55:00,000
footer和nav,

289
00:55:01,000 --> 00:55:02,000
nav的话可以是sidenav,

290
00:55:03,000 --> 00:55:04,000
对吧,

291
00:55:05,000 --> 00:55:06,000
这样的,

292
00:55:06,000 --> 00:55:07,000
我试出来,

293
00:55:07,000 --> 00:55:08,000
我试出来,

294
00:55:08,000 --> 00:55:09,000
就是,

295
00:55:09,000 --> 00:55:10,000
如果,

296
00:55:10,000 --> 00:55:12,000
你两个地方都不给,

297
00:55:12,000 --> 00:55:14,000
这两个pass都不给结构,

298
00:55:14,000 --> 00:55:15,000
那也没有用,

299
00:55:15,000 --> 00:55:16,000
那不对啊,

300
00:55:16,000 --> 00:55:17,000
那不对啊,

301
00:55:17,000 --> 00:55:18,000
对吧,

302
00:55:19,000 --> 00:55:20,000
那肯定是不对的,

303
00:55:23,000 --> 00:55:24,000
对吧,

304
00:55:24,000 --> 00:55:25,000
这里肯定是有一个,

305
00:55:25,000 --> 00:55:26,000
出手的话,

306
00:55:26,000 --> 00:55:27,000
你肯定得有一个,

307
00:55:30,000 --> 00:55:31,000
嗯,

308
00:55:31,000 --> 00:55:32,000
这个,

309
00:55:34,000 --> 00:55:35,000
OK,

310
00:55:35,000 --> 00:55:36,000
好,

311
00:55:36,000 --> 00:55:37,000
那下一个问题就是,

312
00:55:38,000 --> 00:55:40,000
我Link跳转的时候,

313
00:55:40,000 --> 00:55:41,000
或者是用hook,

314
00:55:41,000 --> 00:55:43,000
来navigate跳转的时候,

315
00:55:43,000 --> 00:55:44,000
可以带,

316
00:55:44,000 --> 00:55:46,000
可以带parameter进去吗,

317
00:55:46,000 --> 00:55:47,000
可以带argument进去,

318
00:55:48,000 --> 00:55:49,000
就比如说,

319
00:55:49,000 --> 00:55:51,000
现在我有一个页面,

320
00:55:51,000 --> 00:55:53,000
我反正就是用这个,

321
00:55:53,000 --> 00:55:54,000
我知道用别的很多方法,

322
00:55:54,000 --> 00:55:55,000
也可以实现啊,

323
00:55:55,000 --> 00:55:56,000
可以,可以,

324
00:55:56,000 --> 00:55:58,000
react or loss 里面可以,

325
00:55:58,000 --> 00:55:59,000
今天不在我们讲的范围之内,

326
00:55:59,000 --> 00:56:00,000
但是可以,

327
00:56:00,000 --> 00:56:01,000
可以看一下文档,

328
00:56:01,000 --> 00:56:02,000
里面是有葬的一个机制的,

329
00:56:03,000 --> 00:56:04,000
你在跳过之前,

330
00:56:04,000 --> 00:56:06,000
可以去设一个参数,

331
00:56:06,000 --> 00:56:07,000
而且这个参数,

332
00:56:07,000 --> 00:56:08,000
你设什么都行,

333
00:56:09,000 --> 00:56:10,000
然后最后用hook,

334
00:56:10,000 --> 00:56:11,000
把它取出来,

335
00:56:11,000 --> 00:56:12,000
到那个页面之后,

336
00:56:14,000 --> 00:56:15,000
OK,

337
00:56:15,000 --> 00:56:16,000
因为我想到,

338
00:56:16,000 --> 00:56:17,000
给我想到,

339
00:56:17,000 --> 00:56:18,000
如果我用跳转,

340
00:56:18,000 --> 00:56:19,000
然后呢,

341
00:56:19,000 --> 00:56:21,000
其实我本知是想让它,

342
00:56:21,000 --> 00:56:23,000
按不同的这个link,

343
00:56:23,000 --> 00:56:24,000
它给我,

344
00:56:24,000 --> 00:56:25,000
宣染住,

345
00:56:25,000 --> 00:56:26,000
同一个页面,

346
00:56:26,000 --> 00:56:28,000
但是是不同的内容,

347
00:56:28,000 --> 00:56:29,000
对吧,

348
00:56:29,000 --> 00:56:30,000
我们可以再给个例子,

349
00:56:30,000 --> 00:56:31,000
我们再多写一部,

350
00:56:31,000 --> 00:56:32,000
好吧,

351
00:56:33,000 --> 00:56:34,000
比如说,

352
00:56:34,000 --> 00:56:35,000
这里的话,

353
00:56:35,000 --> 00:56:36,000
多一个东西叫做

354
00:56:36,000 --> 00:56:37,000
product details,

355
00:56:37,000 --> 00:56:38,000
好吧,

356
00:56:39,000 --> 00:56:40,000
是吧,

357
00:56:40,000 --> 00:56:41,000
我们在products的里面,

358
00:56:42,000 --> 00:56:43,000
非常好的问题,

359
00:56:44,000 --> 00:56:45,000
我们在products的里面,

360
00:56:45,000 --> 00:56:47,000
目前我们只宣染一个header,

361
00:56:47,000 --> 00:56:48,000
是吧,

362
00:56:48,000 --> 00:56:49,000
我们用把它,

363
00:56:49,000 --> 00:56:50,000
用那个,

364
00:56:52,000 --> 00:56:53,000
link,

365
00:56:53,000 --> 00:56:54,000
把它包起来,

366
00:56:54,000 --> 00:56:55,000
然后在下面,

367
00:56:55,000 --> 00:56:56,000
我们再给它宣染一个数字,

368
00:56:56,000 --> 00:56:57,000
好吧,

369
00:56:57,000 --> 00:56:58,000
在上面我来定义,

370
00:56:58,000 --> 00:56:59,000
products,

371
00:57:00,000 --> 00:57:01,000
counts,

372
00:57:01,000 --> 00:57:02,000
pro,

373
00:57:02,000 --> 00:57:03,000
docs,

374
00:57:03,000 --> 00:57:04,000
等于,

375
00:57:06,000 --> 00:57:07,000
所以,

376
00:57:07,000 --> 00:57:08,000
我的粘贴幅这两个,

377
00:57:08,000 --> 00:57:09,000
就是id,

378
00:57:09,000 --> 00:57:10,000
等于,

379
00:57:10,000 --> 00:57:11,000
不知道,

380
00:57:11,000 --> 00:57:12,000
1,2,1,2,

381
00:57:12,000 --> 00:57:13,000
然后name,

382
00:57:13,000 --> 00:57:14,000
随便取一个叫做

383
00:57:14,000 --> 00:57:15,000
product1,

384
00:57:15,000 --> 00:57:16,000
好吧,

385
00:57:21,000 --> 00:57:22,000
一样,

386
00:57:22,000 --> 00:57:23,000
粘贴幅知道,

387
00:57:23,000 --> 00:57:24,000
给它粘大概四个出来,

388
00:57:24,000 --> 00:57:26,000
然后我们这里都随便改一下,

389
00:57:26,000 --> 00:57:27,000
改成3,

390
00:57:27,000 --> 00:57:28,000
改成4,

391
00:57:28,000 --> 00:57:29,000
改成5,

392
00:57:29,000 --> 00:57:30,000
这里是2,

393
00:57:30,000 --> 00:57:31,000
这里是3,

394
00:57:31,000 --> 00:57:32,000
这里是4,

395
00:57:32,000 --> 00:57:34,000
然后下面我可以用一个动态宣染,

396
00:57:34,000 --> 00:57:35,000
把它直接弄出来,

397
00:57:35,000 --> 00:57:36,000
这里的话就是,

398
00:57:36,000 --> 00:57:38,000
products.map,

399
00:57:38,000 --> 00:57:39,000
然后里面,

400
00:57:39,000 --> 00:57:40,000
products,

401
00:57:42,000 --> 00:57:43,000
怎么有问题吧,

402
00:57:43,000 --> 00:57:44,000
products对,

403
00:57:45,000 --> 00:57:46,000
然后这里我可以宣染,

404
00:57:46,000 --> 00:57:47,000
我不用扩,

405
00:57:47,000 --> 00:57:48,000
我可以直接打,

406
00:57:48,000 --> 00:57:50,000
可以宣染一个listitem,

407
00:57:50,000 --> 00:57:51,000
listitem里面我一样,

408
00:57:51,000 --> 00:57:52,000
是一个link,

409
00:57:57,000 --> 00:57:58,000
没问题吧,

410
00:57:58,000 --> 00:57:59,000
到这里的话,

411
00:57:59,000 --> 00:58:00,000
第一个要放key,

412
00:58:00,000 --> 00:58:01,000
对吧,

413
00:58:04,000 --> 00:58:05,000
id,

414
00:58:07,000 --> 00:58:08,000
然后link这里,

415
00:58:08,000 --> 00:58:09,000
我一样用ratif path,

416
00:58:09,000 --> 00:58:12,000
我放上去products.id,

417
00:58:12,000 --> 00:58:13,000
我们要注意一下,

418
00:58:13,000 --> 00:58:15,000
products.id,

419
00:58:15,000 --> 00:58:16,000
然后这里,

420
00:58:18,000 --> 00:58:20,000
是products name,

421
00:58:20,000 --> 00:58:22,000
是我的ankle text value,

422
00:58:25,000 --> 00:58:26,000
还有没有问题吧,

423
00:58:26,000 --> 00:58:27,000
是吧,

424
00:58:27,000 --> 00:58:29,000
这就满足你刚刚所讲的这个意思,

425
00:58:29,000 --> 00:58:30,000
是吧,

426
00:58:30,000 --> 00:58:31,000
我先通过动态宣染,

427
00:58:31,000 --> 00:58:33,000
把所有的products的分别宣染,

428
00:58:33,000 --> 00:58:34,000
出一个链接出来,

429
00:58:34,000 --> 00:58:36,000
然后我们要怎么写wrote,

430
00:58:41,000 --> 00:58:43,000
然后这个wrote要怎么写,

431
00:58:44,000 --> 00:58:46,000
咱们在products下面,

432
00:58:46,000 --> 00:58:48,000
加一个新的int,

433
00:58:49,000 --> 00:58:52,000
它很明显是在products后面,

434
00:58:52,000 --> 00:58:53,000
对吧,

435
00:58:53,000 --> 00:58:54,000
我们理论上来说,

436
00:58:54,000 --> 00:58:55,000
应该是放一个什么,

437
00:58:55,000 --> 00:58:56,000
products,

438
00:58:56,000 --> 00:58:57,000
id1,

439
00:58:57,000 --> 00:58:58,000
或者是2,

440
00:58:58,000 --> 00:58:59,000
或者是3,

441
00:58:59,000 --> 00:59:00,000
或者是4,

442
00:59:00,000 --> 00:59:01,000
来实现一个什么,

443
00:59:01,000 --> 00:59:03,000
一个wrote in a page,

444
00:59:03,000 --> 00:59:04,000
但是很明显,

445
00:59:04,000 --> 00:59:05,000
我们不可能什么,

446
00:59:05,000 --> 00:59:06,000
比如说产业复制是吧,

447
00:59:06,000 --> 00:59:07,000
刚刚我们写了4个,

448
00:59:07,000 --> 00:59:08,000
我们这里放4个,

449
00:59:08,000 --> 00:59:10,000
分别放上1,1,1,1,2,3,4,

450
00:59:10,000 --> 00:59:11,000
把他们的id放上去,

451
00:59:11,000 --> 00:59:12,000
这很显然,

452
00:59:12,000 --> 00:59:13,000
不现实,也不实际,

453
00:59:13,000 --> 00:59:15,000
那么什么实际的用法是什么,

454
00:59:15,000 --> 00:59:16,000
把它参数化,

455
00:59:16,000 --> 00:59:18,000
这里我们用一个特殊的语法,

456
00:59:18,000 --> 00:59:19,000
call it,

457
00:59:21,000 --> 00:59:23,000
这个名字随便我们定义,

458
00:59:24,000 --> 00:59:25,000
随便我们定义,

459
00:59:25,000 --> 00:59:26,000
对吧,

460
00:59:26,000 --> 00:59:27,000
但是我们最后要取它的时候,

461
00:59:27,000 --> 00:59:29,000
要跟这个名字要对齐,

462
00:59:29,000 --> 00:59:30,000
然后接下来,

463
00:59:30,000 --> 00:59:32,000
我们再写一个新的page,

464
00:59:34,000 --> 00:59:35,000
这叫做product,

465
00:59:36,000 --> 00:59:38,000
d health.js,

466
00:59:55,000 --> 00:59:57,000
然后底下怎么可以,

467
00:59:57,000 --> 00:59:58,000
先给它一个deep,

468
00:59:58,000 --> 01:00:00,000
把它整个包起来,

469
01:00:00,000 --> 01:00:02,000
然后咱们一样有一个h1,

470
01:00:02,000 --> 01:00:04,000
还有一张我们可以把它放上,

471
01:00:10,000 --> 01:00:11,000
没问题吧,

472
01:00:11,000 --> 01:00:12,000
然后接下来就是,

473
01:00:12,000 --> 01:00:13,000
刚刚背面主所问的问题,

474
01:00:13,000 --> 01:00:14,000
是吧,

475
01:00:14,000 --> 01:00:15,000
咱们如果要在这个里面,

476
01:00:15,000 --> 01:00:16,000
用上这个残数怎么办,

477
01:00:16,000 --> 01:00:18,000
咱们就是把它用上来,

478
01:00:18,000 --> 01:00:20,000
id,等于,

479
01:00:20,000 --> 01:00:21,000
咱们这里放一个扩号,

480
01:00:21,000 --> 01:00:22,000
placeholder是吧,

481
01:00:22,000 --> 01:00:23,000
我们最后再来填这个东西,

482
01:00:23,000 --> 01:00:24,000
没问题吧,

483
01:00:24,000 --> 01:00:25,000
而下面的问题就是,

484
01:00:25,000 --> 01:00:27,000
我们先把它放过去,

485
01:00:27,000 --> 01:00:28,000
把它终于放到这里,

486
01:00:32,000 --> 01:00:33,000
还真没问题吧,

487
01:00:35,000 --> 01:00:36,000
对吧,

488
01:00:36,000 --> 01:00:37,000
也就是说,

489
01:00:37,000 --> 01:00:38,000
我们把product的id,

490
01:00:38,000 --> 01:00:39,000
参数化,

491
01:00:39,000 --> 01:00:40,000
我们再回来看一下,

492
01:00:40,000 --> 01:00:41,000
也就是说,

493
01:00:41,000 --> 01:00:42,000
当咱们到slash,

494
01:00:42,000 --> 01:00:43,000
product,

495
01:00:43,000 --> 01:00:44,000
slash,

496
01:00:44,000 --> 01:00:45,000
e2e2的时候,

497
01:00:45,000 --> 01:00:47,000
咱们应该渲染product的details,

498
01:00:47,000 --> 01:00:49,000
并且我们希望把这个id,

499
01:00:49,000 --> 01:00:51,000
传入到组件当中来,

500
01:00:51,000 --> 01:00:54,000
并且渲染在这个paragraph里面,

501
01:00:55,000 --> 01:00:56,000
好说给d,

502
01:00:56,000 --> 01:00:57,000
怎么去把它取出来,

503
01:00:59,000 --> 01:01:01,000
咱们这里有一个特殊的hook,

504
01:01:01,000 --> 01:01:02,000
叫做useparagraph,

505
01:01:05,000 --> 01:01:07,000
这里我们可以把它取出来,

506
01:01:07,000 --> 01:01:08,000
名字记得是,

507
01:01:08,000 --> 01:01:10,000
我们刚刚打入到这个里面的名字,

508
01:01:10,000 --> 01:01:11,000
如果你把它换上id,

509
01:01:11,000 --> 01:01:12,000
那么你把它取的时候,

510
01:01:12,000 --> 01:01:13,000
就要把它变成id,

511
01:01:14,000 --> 01:01:15,000
这里咱们是product,

512
01:01:15,000 --> 01:01:16,000
然后把product,

513
01:01:16,000 --> 01:01:17,000
给它丢进去,

514
01:01:17,000 --> 01:01:19,000
这是把它取出来,

515
01:01:19,000 --> 01:01:20,000
这没有问题吧,

516
01:01:24,000 --> 01:01:25,000
好,

517
01:01:38,000 --> 01:01:39,000
看见没有,

518
01:01:40,000 --> 01:01:41,000
对吧,

519
01:01:41,000 --> 01:01:43,000
把它换成unordered list,

520
01:01:49,000 --> 01:01:51,000
这是给它包一个unordered list,

521
01:01:51,000 --> 01:01:52,000
是吧,

522
01:01:55,000 --> 01:01:56,000
没问题吧,

523
01:01:57,000 --> 01:01:58,000
对吧,

524
01:01:58,000 --> 01:01:59,000
这里,

525
01:01:59,000 --> 01:02:00,000
每一个details进去,

526
01:02:00,000 --> 01:02:02,000
也会把相对应的参数,

527
01:02:03,000 --> 01:02:04,000
给它打出来,

528
01:02:07,000 --> 01:02:08,000
这是你要问的问题吗,

529
01:02:08,000 --> 01:02:09,000
背面主,

530
01:02:11,000 --> 01:02:12,000
是了,

531
01:02:13,000 --> 01:02:14,000
是了,

532
01:02:14,000 --> 01:02:15,000
这是意思吧,

533
01:02:15,000 --> 01:02:16,000
然后你的两个问题是吧,

534
01:02:16,000 --> 01:02:17,000
你这个问题是,

535
01:02:17,000 --> 01:02:19,000
如何把 route 做一个参数,

536
01:02:19,000 --> 01:02:20,000
毕竟,

537
01:02:20,000 --> 01:02:21,000
把这个参数,

538
01:02:21,000 --> 01:02:22,000
读到这个 route,

539
01:02:22,000 --> 01:02:23,000
想要让它组织当中,

540
01:02:23,000 --> 01:02:25,000
我们可以通过这个方法实现,

541
01:02:25,000 --> 01:02:26,000
你的另一个问题是,

542
01:02:26,000 --> 01:02:28,000
能不能再用 navigate,

543
01:02:29,000 --> 01:02:30,000
就是 use navigator,

544
01:02:30,000 --> 01:02:31,000
return 出来的那个 navigator,

545
01:02:31,000 --> 01:02:33,000
在 home 里面是吧,

546
01:02:33,000 --> 01:02:34,000
我记得是,

547
01:02:34,000 --> 01:02:35,000
在这里,

548
01:02:35,000 --> 01:02:37,000
然后在这里去做什么,

549
01:02:37,000 --> 01:02:38,000
比如说在 code,

550
01:02:38,000 --> 01:02:39,000
在咱们的这个,

551
01:02:39,000 --> 01:02:41,000
Navigator 里面做 routing 的时候,

552
01:02:41,000 --> 01:02:42,000
可以传参数据,

553
01:02:42,000 --> 01:02:43,000
也是可以的,

554
01:02:43,000 --> 01:02:45,000
但是咱们不是在这里直接传,

555
01:02:45,000 --> 01:02:46,000
是有个特殊的方法,

556
01:02:46,000 --> 01:02:47,000
就是,

557
01:02:47,000 --> 01:02:49,000
你可以在 code 后查一下文档,

558
01:02:49,000 --> 01:02:50,000
非常非常的常用,

559
01:02:51,000 --> 01:02:52,000
OK,

560
01:02:54,000 --> 01:02:55,000
而且是,

561
01:02:55,000 --> 01:02:57,000
我们今天关于 route 的大部分内容,

562
01:02:57,000 --> 01:02:58,000
同学们,

563
01:02:58,000 --> 01:02:59,000
还有什么问题吗?

564
01:03:00,000 --> 01:03:01,000
那个老师,

565
01:03:01,000 --> 01:03:02,000
麻烦,

566
01:03:02,000 --> 01:03:03,000
再,

567
01:03:03,000 --> 01:03:04,000
看一下,

568
01:03:04,000 --> 01:03:05,000
就是你 401,

569
01:03:05,000 --> 01:03:06,000
404 那个页面,

570
01:03:06,000 --> 01:03:08,000
是怎么处理,

571
01:03:08,000 --> 01:03:10,000
就找不到那个,

572
01:03:10,000 --> 01:03:12,000
链接的逻辑的,

573
01:03:12,000 --> 01:03:13,000
对,

574
01:03:13,000 --> 01:03:14,000
就是,

575
01:03:14,000 --> 01:03:17,000
其实是写在这个 nasad routing 的配置里面,对吧,

576
01:03:17,000 --> 01:03:18,000
对,

577
01:03:18,000 --> 01:03:19,000
就,

578
01:03:19,000 --> 01:03:20,000
是那个一行吗?

579
01:03:20,000 --> 01:03:21,000
就是这个 error element 呢,

580
01:03:21,000 --> 01:03:22,000
不是吧?

581
01:03:22,000 --> 01:03:23,000
no,

582
01:03:23,000 --> 01:03:24,000
not found error element,

583
01:03:24,000 --> 01:03:25,000
就是这个,

584
01:03:25,000 --> 01:03:27,000
在这里的任何一个 route 当中,

585
01:03:27,000 --> 01:03:29,000
如果你在下面继续去,

586
01:03:29,000 --> 01:03:30,000
呃,

587
01:03:30,000 --> 01:03:31,000
去去去,

588
01:03:31,000 --> 01:03:32,000
比如说,

589
01:03:32,000 --> 01:03:33,000
你的 route 是不存在的话,

590
01:03:33,000 --> 01:03:34,000
它会在,

591
01:03:34,000 --> 01:03:35,000
这一个,

592
01:03:35,000 --> 01:03:36,000
最近的 route 里面,

593
01:03:36,000 --> 01:03:38,000
去找一个 error element,

594
01:03:38,000 --> 01:03:39,000
但是很明显,

595
01:03:39,000 --> 01:03:40,000
咱们这里没定义,对不对?

596
01:03:41,000 --> 01:03:42,000
咱们这里没定义,

597
01:03:42,000 --> 01:03:43,000
对不对?

598
01:03:43,000 --> 01:03:44,000
咱们这里没定义吧?

599
01:03:44,000 --> 01:03:45,000
对吧?

600
01:03:45,000 --> 01:03:46,000
它就会 bubble up,

601
01:03:46,000 --> 01:03:47,000
从此,

602
01:03:47,000 --> 01:03:48,000
到副,

603
01:03:48,000 --> 01:03:49,000
在副这里,

604
01:03:49,000 --> 01:03:50,000
找到一个,

605
01:03:52,000 --> 01:03:53,000
也就是说,

606
01:03:53,000 --> 01:03:55,000
咱们在这一串当中,

607
01:03:55,000 --> 01:03:58,000
我们是把 not found error 定义在了副,

608
01:03:59,000 --> 01:04:00,000
那么,

609
01:04:00,000 --> 01:04:01,000
底下的所有字,

610
01:04:01,000 --> 01:04:02,000
可以共享这一个 config,

611
01:04:02,000 --> 01:04:03,000
你懂我意思了吧?

612
01:04:03,000 --> 01:04:04,000
嗯,

613
01:04:06,000 --> 01:04:07,000
最远以前,

614
01:04:07,000 --> 01:04:08,000
我,

615
01:04:08,000 --> 01:04:09,000
我用的是个,

616
01:04:09,000 --> 01:04:11,000
是写个什么 switch,

617
01:04:11,000 --> 01:04:12,000
然后,

618
01:04:12,000 --> 01:04:14,000
最后放一个新 work card 是吧?

619
01:04:16,000 --> 01:04:17,000
好像是,

620
01:04:17,000 --> 01:04:18,000
你先写过一次,

621
01:04:18,000 --> 01:04:19,000
比较,比较老的用法,

622
01:04:19,000 --> 01:04:20,000
应该是,

623
01:04:20,000 --> 01:04:21,000
老的用法,

624
01:04:21,000 --> 01:04:23,000
应该是 react route,

625
01:04:23,000 --> 01:04:24,000
v5 版本吧,

626
01:04:24,000 --> 01:04:25,000
应该是 v6 版本的已经,

627
01:04:25,000 --> 01:04:26,000
啊,

628
01:04:26,000 --> 01:04:27,000
OK,

629
01:04:27,000 --> 01:04:28,000
明白了,

630
01:04:31,000 --> 01:04:32,000
老师提个问题,

631
01:04:32,000 --> 01:04:34,000
就是你刚才写的那個 outlet,

632
01:04:34,000 --> 01:04:36,000
我没有太,

633
01:04:36,000 --> 01:04:37,000
太明白,

634
01:04:37,000 --> 01:04:38,000
就突然间,

635
01:04:38,000 --> 01:04:39,000
一闪而过了那个,

636
01:04:39,000 --> 01:04:40,000
没事,没事,

637
01:04:40,000 --> 01:04:41,000
我们应该可以,

638
01:04:41,000 --> 01:04:42,000
呃,

639
01:04:42,000 --> 01:04:43,000
大概查这个,

640
01:04:43,000 --> 01:04:44,000
今天的状态,

641
01:04:44,000 --> 01:04:45,000
也不是非常好是吧?

642
01:04:45,000 --> 01:04:46,000
原因很简单,

643
01:04:46,000 --> 01:04:47,000
因为我也是,

644
01:04:47,000 --> 01:04:48,000
呃,工作忙到,

645
01:04:48,000 --> 01:04:49,000
刚刚咱们,

646
01:04:49,000 --> 01:04:50,000
七点半的时候,

647
01:04:50,000 --> 01:04:51,000
然后直接过来上了课,

648
01:04:51,000 --> 01:04:52,000
然后这个背课的内容呢,

649
01:04:52,000 --> 01:04:53,000
是大概是,

650
01:04:53,000 --> 01:04:54,000
在一周前背好,

651
01:04:54,000 --> 01:04:55,000
你知道吧?

652
01:04:55,000 --> 01:04:56,000
所以,

653
01:04:56,000 --> 01:04:57,000
脑子一团效果,

654
01:04:57,000 --> 01:04:58,000
状态不是非常好,

655
01:04:58,000 --> 01:04:59,000
明天能听出来的语气,

656
01:04:59,000 --> 01:05:00,000
没有之前那么嗨,

657
01:05:00,000 --> 01:05:01,000
对吧?

658
01:05:01,000 --> 01:05:02,000
OK,

659
01:05:02,000 --> 01:05:03,000
呃,

660
01:05:03,000 --> 01:05:04,000
可能之前,

661
01:05:04,000 --> 01:05:05,000
我一旦而过,

662
01:05:05,000 --> 01:05:06,000
有点快啊,

663
01:05:06,000 --> 01:05:07,000
我再给你讲一遍,

664
01:05:07,000 --> 01:05:08,000
呃,

665
01:05:08,000 --> 01:05:09,000
就是,

666
01:05:09,000 --> 01:05:10,000
对吧?

667
01:05:10,000 --> 01:05:11,000
嗯,

668
01:05:11,000 --> 01:05:12,000
然后咱们在副当中,

669
01:05:12,000 --> 01:05:13,000
也有一个element的定义,

670
01:05:13,000 --> 01:05:14,000
对不对?

671
01:05:14,000 --> 01:05:15,000
嗯,

672
01:05:15,000 --> 01:05:16,000
这里的话,

673
01:05:16,000 --> 01:05:17,000
咱们有一个mainlayout,

674
01:05:17,000 --> 01:05:18,000
首先,

675
01:05:18,000 --> 01:05:19,000
呃,

676
01:05:19,000 --> 01:05:20,000
到这里,

677
01:05:20,000 --> 01:05:21,000
任何一个Zrout里,

678
01:05:21,000 --> 01:05:22,000
都会去,

679
01:05:22,000 --> 01:05:23,000
轩染mainlayout,

680
01:05:23,000 --> 01:05:24,000
这点,

681
01:05:24,000 --> 01:05:25,000
你同意吗?

682
01:05:25,000 --> 01:05:26,000
同意,

683
01:05:26,000 --> 01:05:27,000
同意,

684
01:05:27,000 --> 01:05:28,000
这个明白,

685
01:05:28,000 --> 01:05:29,000
没有问题吧?

686
01:05:29,000 --> 01:05:30,000
好,

687
01:05:30,000 --> 01:05:31,000
那下面的问题就是,

688
01:05:31,000 --> 01:05:32,000
呃,

689
01:05:32,000 --> 01:05:33,000
当我比如说,

690
01:05:33,000 --> 01:05:34,000
这里到达,

691
01:05:34,000 --> 01:05:35,000
呃,

692
01:05:35,000 --> 01:05:36,000
Products的时候,

693
01:05:36,000 --> 01:05:37,000
会既轩染Products,

694
01:05:37,000 --> 01:05:38,000
也轩染mainlayout,

695
01:05:38,000 --> 01:05:39,000
就关系了,

696
01:05:39,000 --> 01:05:41,000
一定是把Zrout相线,

697
01:05:41,000 --> 01:05:42,000
照副当中,

698
01:05:42,000 --> 01:05:43,000
对,

699
01:05:43,000 --> 01:05:44,000
对,

700
01:05:44,000 --> 01:05:45,000
但是你想把它,

701
01:05:45,000 --> 01:05:46,000
相线在副当中的,

702
01:05:46,000 --> 01:05:47,000
哪一个地方呢?

703
01:05:47,000 --> 01:05:48,000
诶,

704
01:05:48,000 --> 01:05:49,000
怎么用outlet来给它,

705
01:05:49,000 --> 01:05:50,000
标记出来?

706
01:05:50,000 --> 01:05:51,000
比如说,

707
01:05:51,000 --> 01:05:52,000
我把这个outlet,

708
01:05:52,000 --> 01:05:54,000
放到这里,

709
01:05:54,000 --> 01:05:55,000
那它就,

710
01:05:55,000 --> 01:05:56,000
应该是,

711
01:05:56,000 --> 01:05:58,000
相线在mainhead之上,

712
01:05:58,000 --> 01:05:59,000
你们来看一下,

713
01:05:59,000 --> 01:06:01,000
是这个意思吧?

714
01:06:01,000 --> 01:06:02,000
哦,

715
01:06:02,000 --> 01:06:03,000
OK,

716
01:06:03,000 --> 01:06:04,000
这懂这个意思吧?

717
01:06:04,000 --> 01:06:05,000
对吧?

718
01:06:05,000 --> 01:06:06,000
对,

719
01:06:06,000 --> 01:06:07,000
这相当于什么呀?

720
01:06:07,000 --> 01:06:08,000
placehold,

721
01:06:08,000 --> 01:06:09,000
对吧?

722
01:06:09,000 --> 01:06:10,000
嗯,

723
01:06:10,000 --> 01:06:11,000
呃,

724
01:06:11,000 --> 01:06:12,000
我看一下,

725
01:06:12,000 --> 01:06:13,000
稍等一下,

726
01:06:13,000 --> 01:06:14,000
稍等一下,

727
01:06:14,000 --> 01:06:15,000
mainhead,

728
01:06:15,000 --> 01:06:16,000
outlet,

729
01:06:16,000 --> 01:06:17,000
OK,

730
01:06:17,000 --> 01:06:18,000
OK,明白,

731
01:06:18,000 --> 01:06:19,000
那最后这个outlet,

732
01:06:19,000 --> 01:06:21,000
就会被实际,

733
01:06:21,000 --> 01:06:22,000
Zrout,

734
01:06:22,000 --> 01:06:24,000
我相对应的element,

735
01:06:24,000 --> 01:06:25,000
给它overwrite掉,

736
01:06:25,000 --> 01:06:26,000
对吧?

737
01:06:26,000 --> 01:06:27,000
相当于什么?

738
01:06:27,000 --> 01:06:28,000
比如说,

739
01:06:28,000 --> 01:06:29,000
咱们到Products里面,

740
01:06:29,000 --> 01:06:31,000
相当于把这一堆内容,

741
01:06:31,000 --> 01:06:33,000
嗯,

742
01:06:33,000 --> 01:06:34,000
呃,

743
01:06:34,000 --> 01:06:35,000
粘贴复制到这里,

744
01:06:35,000 --> 01:06:36,000
对吧?

745
01:06:38,000 --> 01:06:39,000
相当于这样,

746
01:06:39,000 --> 01:06:40,000
对不对?

747
01:06:40,000 --> 01:06:42,000
如果你把outlet放在这里,

748
01:06:42,000 --> 01:06:43,000
就相当于,

749
01:06:43,000 --> 01:06:44,000
这样,

750
01:06:45,000 --> 01:06:46,000
嗯,

751
01:06:46,000 --> 01:06:47,000
那我能问个问题吗,

752
01:06:47,000 --> 01:06:48,000
老师?

753
01:06:48,000 --> 01:06:49,000
嗯,

754
01:06:49,000 --> 01:06:50,000
那你,

755
01:06:50,000 --> 01:06:51,000
你这个是在,

756
01:06:51,000 --> 01:06:52,000
呃,

757
01:06:52,000 --> 01:06:54,000
稍等一下,

758
01:06:54,000 --> 01:06:55,000
对,

759
01:06:55,000 --> 01:06:56,000
你这个是在,

760
01:06:56,000 --> 01:06:57,000
react,

761
01:06:57,000 --> 01:06:58,000
Zrout,

762
01:06:58,000 --> 01:06:59,000
拿出来的东西,

763
01:06:59,000 --> 01:07:00,000
不是我自己,

764
01:07:00,000 --> 01:07:01,000
就是不是react,

765
01:07:01,000 --> 01:07:02,000
天生有的东西,

766
01:07:02,000 --> 01:07:03,000
好的,

767
01:07:03,000 --> 01:07:04,000
那,

768
01:07:04,000 --> 01:07:05,000
嗯,

769
01:07:05,000 --> 01:07:06,000
那就是举个例子,

770
01:07:06,000 --> 01:07:07,000
如果我的,

771
01:07:07,000 --> 01:07:08,000
我要写future的话,

772
01:07:08,000 --> 01:07:09,000
我也,

773
01:07:09,000 --> 01:07:10,000
我也要在,

774
01:07:10,000 --> 01:07:11,000
其他的那个,

775
01:07:11,000 --> 01:07:12,000
配置里面,

776
01:07:12,000 --> 01:07:13,000
就是也包含的话,

777
01:07:13,000 --> 01:07:14,000
我只需要在,

778
01:07:14,000 --> 01:07:17,000
就我不需要再加一个outlet了吧,

779
01:07:17,000 --> 01:07:18,000
只需要,

780
01:07:18,000 --> 01:07:19,000
就只要一个就可以了,

781
01:07:19,000 --> 01:07:20,000
什么?

782
01:07:20,000 --> 01:07:21,000
outlet是什么?

783
01:07:21,000 --> 01:07:23,000
outlet是你要,

784
01:07:24,000 --> 01:07:26,000
在layout里的什么位置,

785
01:07:26,000 --> 01:07:27,000
来宣览子啊,

786
01:07:27,000 --> 01:07:28,000
对吧?

787
01:07:28,000 --> 01:07:29,000
宣览这个东西,

788
01:07:29,000 --> 01:07:30,000
宣览Home,

789
01:07:30,000 --> 01:07:31,000
宣览Products,

790
01:07:31,000 --> 01:07:32,000
宣览ProductsDetails,

791
01:07:32,000 --> 01:07:33,000
宣览About,

792
01:07:34,000 --> 01:07:35,000
嗯,

793
01:07:35,000 --> 01:07:36,000
负责跟他就不相干,

794
01:07:36,000 --> 01:07:37,000
他的好处在于什么?

795
01:07:37,000 --> 01:07:38,000
怎么可以把layout里面,

796
01:07:38,000 --> 01:07:39,000
你随便怎么写,

797
01:07:39,000 --> 01:07:40,000
比如这里怎么写,

798
01:07:40,000 --> 01:07:41,000
负责是吧?

799
01:07:41,000 --> 01:07:42,000
copy,

800
01:07:42,000 --> 01:07:43,000
write,

801
01:07:43,000 --> 01:07:44,000
my,

802
01:07:44,000 --> 01:07:45,000
ging,

803
01:07:45,000 --> 01:07:46,000
2023,

804
01:07:50,000 --> 01:07:51,000
诶,

805
01:07:51,000 --> 01:07:52,000
又有关掉了,

806
01:07:53,000 --> 01:07:55,000
然后他会被所有的rout,

807
01:07:55,000 --> 01:07:57,000
所有的Zrout里面的,

808
01:07:57,000 --> 01:07:59,000
所有配置给他继承,

809
01:07:59,000 --> 01:08:00,000
现在这个意思没有,

810
01:08:00,000 --> 01:08:01,000
对不对?

811
01:08:01,000 --> 01:08:02,000
我不管到哪里,

812
01:08:02,000 --> 01:08:03,000
他都会被继承到,

813
01:08:03,000 --> 01:08:04,000
嗯嗯,

814
01:08:05,000 --> 01:08:06,000
OK,

815
01:08:06,000 --> 01:08:08,000
明白这个意思吧?

816
01:08:08,000 --> 01:08:09,000
嗯嗯,

817
01:08:11,000 --> 01:08:12,000
嗯嗯,

818
01:08:12,000 --> 01:08:13,000
谢谢老师,

819
01:08:13,000 --> 01:08:14,000
没问题,

820
01:08:14,000 --> 01:08:15,000
好,

821
01:08:15,000 --> 01:08:16,000
这里再给同学们,

822
01:08:16,000 --> 01:08:18,000
看一个比较稍的操作,

823
01:08:20,000 --> 01:08:21,000
首先,

824
01:08:22,000 --> 01:08:24,000
在ProductsDetails里,

825
01:08:26,000 --> 01:08:28,000
我在下面放一个button,

826
01:08:30,000 --> 01:08:31,000
没问题吧?

827
01:08:31,000 --> 01:08:32,000
button里面,

828
01:08:32,000 --> 01:08:33,000
给一个link,

829
01:08:33,000 --> 01:08:34,000
很明显我在这里要干嘛?

830
01:08:35,000 --> 01:08:37,000
我要给他做一个跳转,对吧?

831
01:08:38,000 --> 01:08:39,000
这里的to,

832
01:08:41,000 --> 01:08:43,000
我放double到,

833
01:08:43,000 --> 01:08:45,000
首先有同学知道double到,

834
01:08:45,000 --> 01:08:46,000
什么意思吗?

835
01:08:53,000 --> 01:08:54,000
诶,

836
01:08:54,000 --> 01:08:55,000
同学知道double到,

837
01:08:55,000 --> 01:08:56,000
什么意思吗?

838
01:08:57,000 --> 01:08:58,000
去到上一集啊,

839
01:08:58,000 --> 01:08:59,000
去到上一集是吧?

840
01:08:59,000 --> 01:09:02,000
是咱们a relative path里面的一个概念,

841
01:09:03,000 --> 01:09:04,000
没问题吧?

842
01:09:04,000 --> 01:09:05,000
好,

843
01:09:05,000 --> 01:09:06,000
我们来看一下,

844
01:09:06,000 --> 01:09:08,000
在这里点到product2,

845
01:09:10,000 --> 01:09:11,000
好,

846
01:09:11,000 --> 01:09:12,000
你告诉我,

847
01:09:12,000 --> 01:09:13,000
我点了back之后,

848
01:09:13,000 --> 01:09:14,000
ideally,

849
01:09:14,000 --> 01:09:15,000
他的上一个page,

850
01:09:15,000 --> 01:09:16,000
应该是什么?

851
01:09:18,000 --> 01:09:20,000
他的上一个page,

852
01:09:20,000 --> 01:09:21,000
ideally,

853
01:09:21,000 --> 01:09:22,000
应该是,

854
01:09:22,000 --> 01:09:23,000
呃,

855
01:09:23,000 --> 01:09:24,000
应该是products,

856
01:09:24,000 --> 01:09:26,000
应该是products,对不对?

857
01:09:26,000 --> 01:09:27,000
对,

858
01:09:27,000 --> 01:09:28,000
实际上呢?

859
01:09:30,000 --> 01:09:32,000
实际上去到了root home底下,

860
01:09:32,000 --> 01:09:33,000
对,

861
01:09:33,000 --> 01:09:34,000
应该是home,

862
01:09:34,000 --> 01:09:35,000
为什么会这样?

863
01:09:37,000 --> 01:09:38,000
因为,

864
01:09:38,000 --> 01:09:39,000
你设计的时候,

865
01:09:39,000 --> 01:09:41,000
他并不是一个负自己关系,

866
01:09:42,000 --> 01:09:43,000
是吧?是这个意思吗?

867
01:09:43,000 --> 01:09:44,000
其实他是到哪里啊?

868
01:09:44,000 --> 01:09:45,000
是到我的负,

869
01:09:46,000 --> 01:09:47,000
没问题吧?

870
01:09:47,000 --> 01:09:48,000
我的负是谁啊?

871
01:09:52,000 --> 01:09:53,000
我的负不就是这个吗?

872
01:09:57,000 --> 01:09:58,000
对吧?

873
01:10:00,000 --> 01:10:01,000
那是不是就会选择这个?

874
01:10:05,000 --> 01:10:06,000
没问题吧?

875
01:10:06,000 --> 01:10:07,000
要怎么修这个问题啊?

876
01:10:11,000 --> 01:10:12,000
不要,

877
01:10:12,000 --> 01:10:13,000
不要回退,

878
01:10:13,000 --> 01:10:15,000
直接get to product,

879
01:10:15,000 --> 01:10:16,000
那反显然不是,

880
01:10:16,000 --> 01:10:17,000
咱们这里可以给他,

881
01:10:17,000 --> 01:10:19,000
设置一个relative值,

882
01:10:21,000 --> 01:10:22,000
原先的relative是什么?

883
01:10:22,000 --> 01:10:24,000
是relative to route,

884
01:10:24,000 --> 01:10:25,000
我们这里可以,

885
01:10:25,000 --> 01:10:27,000
可以设置relative to path,

886
01:10:28,000 --> 01:10:29,000
什么意思啊?

887
01:10:29,000 --> 01:10:30,000
我们route的上一级,

888
01:10:30,000 --> 01:10:31,000
是这个,

889
01:10:31,000 --> 01:10:32,000
没有问题吧?

890
01:10:32,000 --> 01:10:34,000
但是我们path的上一级别,

891
01:10:34,000 --> 01:10:35,000
是什么?

892
01:10:35,000 --> 01:10:36,000
是这个啊,

893
01:10:36,000 --> 01:10:37,000
准备懂这个概念吗?

894
01:10:37,000 --> 01:10:40,000
route跟path之间的区别,

895
01:10:41,000 --> 01:10:42,000
设置好了之后,

896
01:10:43,000 --> 01:10:44,000
我再来,

897
01:10:44,000 --> 01:10:45,000
回去,

898
01:10:45,000 --> 01:10:46,000
看见没有?

899
01:10:46,000 --> 01:10:47,000
product page,

900
01:10:47,000 --> 01:10:48,000
这个意思吧?

901
01:10:54,000 --> 01:10:55,000
明白吗?

902
01:10:56,000 --> 01:10:58,000
现在我就不是relative to route,

903
01:10:58,000 --> 01:11:00,000
而是relative to path,

904
01:11:01,000 --> 01:11:02,000
那么我往上的话,

905
01:11:04,000 --> 01:11:05,000
他就会把,

906
01:11:05,000 --> 01:11:07,000
刚写的这个拿掉,

907
01:11:08,000 --> 01:11:09,000
我的上一级就是product,

908
01:11:09,000 --> 01:11:10,000
所以他会到product里面,

909
01:11:14,000 --> 01:11:15,000
那product如果,

910
01:11:16,000 --> 01:11:17,000
设置relative to path,

911
01:11:17,000 --> 01:11:18,000
他的上一级,

912
01:11:20,000 --> 01:11:21,000
这就是home啊?

913
01:11:22,000 --> 01:11:23,000
斜杠前面,

914
01:11:23,000 --> 01:11:24,000
给他删掉吧,

915
01:11:24,000 --> 01:11:25,000
这就是上一级别,

916
01:11:26,000 --> 01:11:27,000
哦,对,对,

917
01:11:27,000 --> 01:11:27,000


918
01:11:27,000 --> 01:11:28,000
是这个意思吧?

919
01:11:28,000 --> 01:11:29,000
对吧?

920
01:11:29,000 --> 01:11:31,000
这path的级别是有什么分开的?

921
01:11:31,000 --> 01:11:33,000
不就是咱们的fold slash来分开吗?

922
01:11:33,000 --> 01:11:34,000
对不对?

923
01:11:37,000 --> 01:11:38,000
所以你,

924
01:11:38,000 --> 01:11:40,000
当设置成relative to path的时候,

925
01:11:40,000 --> 01:11:42,000
他会回到上一个斜杠的地,

926
01:11:43,000 --> 01:11:45,000
还去达到咱们所有的需求呢,

927
01:11:45,000 --> 01:11:46,000
在这里,

928
01:11:48,000 --> 01:11:50,000
实际上这个relative to path,

929
01:11:50,000 --> 01:11:51,000
是我们平时,

930
01:11:52,000 --> 01:11:53,000
更容易理解的这个,

931
01:11:54,000 --> 01:11:55,000
这个东西很兼人建制了,

932
01:11:56,000 --> 01:11:57,000
你不一定要这么讲,

933
01:11:57,000 --> 01:11:58,000
是对吧?

934
01:11:58,000 --> 01:11:59,000
就是大家,

935
01:11:59,000 --> 01:12:00,000
定义都不太一样,

936
01:12:01,000 --> 01:12:02,000
OK,

937
01:12:05,000 --> 01:12:07,000
那就是routing的最主要的内容,

938
01:12:10,000 --> 01:12:11,000
我想redirect,

939
01:12:11,000 --> 01:12:12,000
redirect不会讲今天,

940
01:12:13,000 --> 01:12:14,000
好,那内容比较有限,

941
01:12:18,000 --> 01:12:19,000
今天,

942
01:12:19,000 --> 01:12:20,000
这些就是routing的所有内容,

943
01:12:21,000 --> 01:12:24,000
如果我们要做一个authorized,

944
01:12:24,000 --> 01:12:25,000
router,

945
01:12:25,000 --> 01:12:26,000
rout,

946
01:12:26,000 --> 01:12:27,000
Tacted route,

947
01:12:27,000 --> 01:12:28,000
这也不像我们今天说的方式,

948
01:12:44,000 --> 01:12:45,000
没有问题的话,

949
01:12:45,000 --> 01:12:46,000
我们今天早一点休息,

950
01:12:46,000 --> 01:12:47,000
好吧,

951
01:12:47,000 --> 01:12:48,000
我们休息个10分钟,

952
01:12:48,000 --> 01:12:49,000
然后回来去,

953
01:12:49,000 --> 01:12:50,000
把下半段内容给它干掉,

954
01:12:51,000 --> 01:12:53,000
然后我们再次报个签,

955
01:12:53,000 --> 01:12:54,000
今天的状态实在不是特别好,

956
01:12:54,000 --> 01:12:55,000
你们应该能听出来,

957
01:12:57,000 --> 01:12:58,000
好吧,

958
01:12:58,000 --> 01:12:59,000
我们休息个10分钟,

959
01:12:59,000 --> 01:13:00,000
然后我们回来把hooks讲一下,

960
01:13:01,000 --> 01:13:02,000
相信hooks啊,

961
01:13:02,000 --> 01:13:03,000
同学们会有些收获的,

962
01:13:06,000 --> 01:13:08,000
谢谢弄小强同学,

963
01:13:18,000 --> 01:13:19,000
谢谢,

964
01:16:19,000 --> 01:16:20,000
你

965
01:16:28,000 --> 01:16:29,000
初晨

966
01:16:29,000 --> 01:16:30,200
你

967
01:16:30,200 --> 01:16:31,400
我

968
01:16:31,400 --> 01:16:32,400
你

969
01:16:32,400 --> 01:16:33,400
你

970
01:16:33,400 --> 01:16:34,400
你

971
01:16:34,400 --> 01:16:35,400
你

972
01:16:35,400 --> 01:16:36,400
你

973
01:16:36,400 --> 01:16:37,400
你

974
01:16:37,400 --> 01:16:38,400
你

975
01:16:38,400 --> 01:16:39,400
你

976
01:16:39,400 --> 01:16:40,400
你

977
01:16:40,400 --> 01:16:41,400
你

978
01:16:41,400 --> 01:16:42,400
你

979
01:16:42,400 --> 01:16:43,400
你

980
01:16:43,400 --> 01:16:44,400
你

981
01:16:44,400 --> 01:16:45,400
你

982
01:16:45,400 --> 01:16:46,400
你

983
01:16:46,400 --> 01:16:47,400
你

984
01:16:47,400 --> 01:16:49,200
你

985
01:16:49,200 --> 01:16:50,800
你

986
01:16:50,800 --> 01:17:04,800
你

987
01:17:04,800 --> 01:17:05,800
你

988
01:17:05,800 --> 01:17:06,600
你

989
01:17:09,600 --> 01:17:10,600
你

990
01:17:13,400 --> 01:17:14,400
你

991
01:17:17,400 --> 01:17:19,000
你

992
01:17:21,000 --> 01:17:22,000
你

993
01:17:25,600 --> 01:17:26,600
你

994
01:17:35,600 --> 01:17:36,600
你

995
01:17:38,600 --> 01:17:40,600
你

996
01:17:43,400 --> 01:17:46,200
你

997
01:17:46,200 --> 01:17:48,200
你

998
01:17:50,200 --> 01:17:51,200
你

999
01:17:53,200 --> 01:17:54,200
你

1000
01:17:56,200 --> 01:17:57,200
你

1001
01:17:59,200 --> 01:18:00,200
你

1002
01:18:02,200 --> 01:18:03,200
你

1003
01:18:06,200 --> 01:18:07,200
你

1004
01:18:10,200 --> 01:18:11,200
你

1005
01:18:13,200 --> 01:18:14,200
你

1006
01:18:16,200 --> 01:18:18,200
你

1007
01:18:20,200 --> 01:18:21,200
你

1008
01:18:23,200 --> 01:18:24,200
你

1009
01:18:26,200 --> 01:18:27,200
你

1010
01:18:29,200 --> 01:18:30,200
你

1011
01:18:32,200 --> 01:18:33,200
你

1012
01:18:36,200 --> 01:18:37,200
你

1013
01:18:40,200 --> 01:18:41,200
你

1014
01:18:43,200 --> 01:18:44,200
你

1015
01:18:46,200 --> 01:18:48,200
你

1016
01:18:50,200 --> 01:18:52,200
你

1017
01:18:54,200 --> 01:18:56,200
你

1018
01:18:58,200 --> 01:19:00,200
你

1019
01:19:02,200 --> 01:19:04,200
你

1020
01:19:06,200 --> 01:19:08,200
你

1021
01:19:10,200 --> 01:19:12,200
你

1022
01:19:12,200 --> 01:19:14,200
你

1023
01:19:16,200 --> 01:19:18,200
你

1024
01:19:20,200 --> 01:19:22,200
你

1025
01:19:24,200 --> 01:19:26,200
你

1026
01:19:28,200 --> 01:19:30,200
你

1027
01:19:32,200 --> 01:19:34,200
你

1028
01:19:36,200 --> 01:19:38,200
你

1029
01:19:38,200 --> 01:19:40,200
你

1030
01:19:42,200 --> 01:19:44,200
你

1031
01:19:46,200 --> 01:19:48,200
你

1032
01:19:52,200 --> 01:19:54,200
你

1033
01:19:56,200 --> 01:19:58,200
你

1034
01:20:00,200 --> 01:20:02,200
你

1035
01:20:04,200 --> 01:20:06,200
你

1036
01:20:08,200 --> 01:20:10,200
你

1037
01:20:12,200 --> 01:20:14,200
你

1038
01:20:16,200 --> 01:20:18,200
你

1039
01:20:22,200 --> 01:20:24,200
你

1040
01:20:26,200 --> 01:20:28,200
你

1041
01:20:30,200 --> 01:20:32,200
你

1042
01:20:34,200 --> 01:20:36,200
你

1043
01:20:38,200 --> 01:20:40,200
你

1044
01:20:42,200 --> 01:20:44,200
你

1045
01:20:46,200 --> 01:20:48,200
你

1046
01:20:50,200 --> 01:20:52,200
你

1047
01:20:54,200 --> 01:20:56,200
你

1048
01:20:58,200 --> 01:21:00,200
你

1049
01:21:02,200 --> 01:21:04,200
你

1050
01:21:04,200 --> 01:21:06,200
你

1051
01:21:10,200 --> 01:21:12,200
你

1052
01:21:14,200 --> 01:21:16,200
你

1053
01:21:18,200 --> 01:21:20,200
你

1054
01:21:22,200 --> 01:21:24,200
你

1055
01:21:26,200 --> 01:21:28,200
你

1056
01:21:30,200 --> 01:21:32,200
你

1057
01:21:34,200 --> 01:21:36,200
你

1058
01:21:38,200 --> 01:21:40,200
你

1059
01:21:42,200 --> 01:21:44,200
你

1060
01:21:48,200 --> 01:21:50,200
你

1061
01:21:52,200 --> 01:21:54,200
你

1062
01:21:56,200 --> 01:21:58,200
你

1063
01:22:00,200 --> 01:22:02,200
你

1064
01:22:04,200 --> 01:22:06,200
你

1065
01:22:10,200 --> 01:22:12,200
你

1066
01:22:14,200 --> 01:22:16,200
你

1067
01:22:18,200 --> 01:22:20,200
你

1068
01:22:22,200 --> 01:22:24,200
你

1069
01:22:26,200 --> 01:22:28,200
你

1070
01:22:30,200 --> 01:22:32,200
你

1071
01:22:34,200 --> 01:22:36,200
你

1072
01:22:38,200 --> 01:22:40,200
你

1073
01:22:42,200 --> 01:22:44,200
你

1074
01:22:46,200 --> 01:22:48,200
你

1075
01:22:50,200 --> 01:22:52,200
你

1076
01:22:54,200 --> 01:22:56,200
你

1077
01:22:58,200 --> 01:23:00,200
你

1078
01:23:00,200 --> 01:23:02,200
你

1079
01:23:04,200 --> 01:23:06,200
你

1080
01:23:08,200 --> 01:23:10,200
你

1081
01:23:12,200 --> 01:23:14,200
你

1082
01:23:16,200 --> 01:23:18,200
你

1083
01:23:20,200 --> 01:23:22,200
你

1084
01:23:24,200 --> 01:23:26,200
你

1085
01:23:26,200 --> 01:23:28,200
你

1086
01:23:30,200 --> 01:23:32,200
你

1087
01:23:34,200 --> 01:23:36,200
你

1088
01:23:38,200 --> 01:23:40,200
你

1089
01:23:42,200 --> 01:23:44,200
你

1090
01:23:46,200 --> 01:23:48,200
你

1091
01:23:50,200 --> 01:23:52,200
你

1092
01:23:52,200 --> 01:23:54,200
你

1093
01:23:56,200 --> 01:23:58,200
你

1094
01:24:00,200 --> 01:24:02,200
你

1095
01:24:04,200 --> 01:24:06,200
你

1096
01:24:08,200 --> 01:24:10,200
你

1097
01:24:12,200 --> 01:24:14,200
你

1098
01:24:16,200 --> 01:24:18,200
你

1099
01:24:18,200 --> 01:24:20,200
你

1100
01:24:22,200 --> 01:24:24,200
你

1101
01:24:26,200 --> 01:24:28,200
你

1102
01:24:30,200 --> 01:24:32,200
你

1103
01:24:34,200 --> 01:24:36,200
你

1104
01:24:38,200 --> 01:24:40,200
你

1105
01:24:42,200 --> 01:24:44,200
你

1106
01:24:44,200 --> 01:24:46,200
你

1107
01:24:48,200 --> 01:24:50,200
你

1108
01:24:52,200 --> 01:24:54,200
你

1109
01:24:56,200 --> 01:24:58,200
你

1110
01:25:00,200 --> 01:25:02,200
你

1111
01:25:04,200 --> 01:25:06,200
你

1112
01:25:08,200 --> 01:25:10,200
你

1113
01:25:10,200 --> 01:25:12,200
你

1114
01:25:14,200 --> 01:25:16,200
你

1115
01:25:18,200 --> 01:25:20,200
你

1116
01:25:22,200 --> 01:25:24,200
你

1117
01:25:26,200 --> 01:25:28,200
你

1118
01:25:30,200 --> 01:25:32,200
你

1119
01:25:34,200 --> 01:25:36,200
你

1120
01:25:36,200 --> 01:25:38,200
你

1121
01:25:40,200 --> 01:25:42,200
你

1122
01:25:44,200 --> 01:25:46,200
你

1123
01:25:48,200 --> 01:25:50,200
你

1124
01:25:52,200 --> 01:25:54,200
你

1125
01:25:56,200 --> 01:25:58,200
你

1126
01:26:00,200 --> 01:26:02,200
你

1127
01:26:02,200 --> 01:26:04,200
你

1128
01:26:08,200 --> 01:26:10,200
你

1129
01:26:12,200 --> 01:26:14,200
你

1130
01:26:16,200 --> 01:26:18,200
你

1131
01:26:20,200 --> 01:26:22,200
你

1132
01:26:24,200 --> 01:26:26,200
你

1133
01:26:28,200 --> 01:26:30,200
你

1134
01:26:32,200 --> 01:26:34,200
你

1135
01:26:38,200 --> 01:26:40,200
你

1136
01:26:40,200 --> 01:26:42,200
你

1137
01:26:42,200 --> 01:26:44,200
你

1138
01:26:44,200 --> 01:26:46,200
你

1139
01:26:46,200 --> 01:26:48,200
你

1140
01:26:48,200 --> 01:26:50,200
你

1141
01:26:50,200 --> 01:26:52,200
你

1142
01:26:54,200 --> 01:26:56,200
你

1143
01:26:56,200 --> 01:26:58,200
你

1144
01:26:58,200 --> 01:27:00,200
你

1145
01:27:00,200 --> 01:27:02,200
你

1146
01:27:06,200 --> 01:27:08,200
你

1147
01:27:08,200 --> 01:27:10,200
你

1148
01:27:12,200 --> 01:27:14,200
你

1149
01:27:16,200 --> 01:27:18,200
你

1150
01:27:26,200 --> 01:27:28,200
你

1151
01:27:30,200 --> 01:27:32,200
你

1152
01:27:34,200 --> 01:27:36,200
你

1153
01:28:01,200 --> 01:28:02,200
你

1154
01:28:06,200 --> 01:28:08,200
你

1155
01:28:10,200 --> 01:28:12,200
你

1156
01:28:14,200 --> 01:28:16,200
你

1157
01:28:16,200 --> 01:28:18,200
你

1158
01:28:18,200 --> 01:28:20,200
你

1159
01:28:24,200 --> 01:28:26,200
你

1160
01:28:26,200 --> 01:28:28,200
你

1161
01:28:28,200 --> 01:28:30,200
you

1162
01:28:30,200 --> 01:28:39,200
如果你想要去比你想像一下如果是很多team在参与开发的一个共同的项目是吧你可能的大数量达到比如说上百人

1163
01:28:39,200 --> 01:28:45,200
呃弄的很明显不太不太不太够用是吧一般都是用加吧比较多

1164
01:28:53,200 --> 01:28:56,200
这里我来打开刚刚才创建的新项目

1165
01:28:58,200 --> 01:29:02,200
new window把他拽下来把这个层面都给他关掉先

1166
01:29:15,200 --> 01:29:21,200
OK没问题吧啊这里咱们有一个新的项目啊我们第一步先给他清一下

1167
01:29:21,200 --> 01:29:24,200
把不用的东西给他干掉好吧我们这里主要是讲hooks

1168
01:29:29,200 --> 01:29:31,200
跑到这里来我把这东西全部干掉

1169
01:29:34,200 --> 01:29:37,200
start我也不要我只留一个什么Hello world

1170
01:29:44,200 --> 01:29:49,200
然后下一步是到index.js里也是把这东西给他干掉

1171
01:29:49,200 --> 01:29:59,200
好那么咱们现在可以试着启动一下看看能不能跑起来

1172
01:30:05,200 --> 01:30:18,200
OK没有问题就是一个Hello world啊非常基本好那么咱们先来讲use memo也叫use memo两种发音我都听说过一般我自己是喊他叫use memo

1173
01:30:18,200 --> 01:30:22,200
好咱们创建一个新的director一样叫做component

1174
01:30:24,200 --> 01:30:28,200
然后在component之下怎么来创建一个新的

1175
01:30:31,200 --> 01:30:37,200
主件叫做use memo.js

1176
01:30:38,200 --> 01:30:42,200
这里咱们可以打上一些视力代码没问题吧

1177
01:30:42,200 --> 01:30:46,200
比较简单怎么这里先给他写一个counselt

1178
01:30:46,200 --> 01:30:56,200
use memo等于没有参数的一个总键然后直接让他xpod出去 default use memo

1179
01:30:56,200 --> 01:30:59,200
怎么在app里先直接把它用上

1180
01:30:59,200 --> 01:31:04,200
OK吧好咱们就可以打里面的内容

1181
01:31:04,200 --> 01:31:09,200
一件事我先写两个local state

1182
01:31:13,200 --> 01:31:19,200
我在打的过程中同学们也可以来看一下这样的一个组件究竟是要干上对吧

1183
01:31:19,200 --> 01:31:26,200
然后管理一个number再管理一个stat number好第二个local state

1184
01:31:26,200 --> 01:31:31,200
叫做dark很明显是跟theme相关啊

1185
01:31:31,200 --> 01:31:33,200
stiling theme相关的东西是吧

1186
01:31:33,200 --> 01:31:35,200
黑暗模式嘛

1187
01:31:35,200 --> 01:31:41,200
咱们也用一个use state来管理本地的local state

1188
01:31:41,200 --> 01:31:42,200
不好意思

1189
01:31:42,200 --> 01:31:47,200
这里把他给一个出使值然后给dark一个出使值

1190
01:31:47,200 --> 01:31:48,200
可以看出来

1191
01:31:48,200 --> 01:31:51,200
第一个管理的状态是一个number

1192
01:31:51,200 --> 01:31:54,200
而第二个是一个独立

1193
01:31:54,200 --> 01:32:01,200
好接下来怎么来写一个double number很明显我要把上面的number进行一个什么double是吧

1194
01:32:01,200 --> 01:32:10,200
所以的话我在外面给他写一个东西叫做exhensive font

1195
01:32:10,200 --> 01:32:11,200
没问题吧

1196
01:32:11,200 --> 01:32:17,200
好一件事情那我先把他的expansive的这个expansive呃体现出来

1197
01:32:17,200 --> 01:32:25,200
我写一个let i等于0 i小于1 1 2 3 4 5 6 7 8

1198
01:32:25,200 --> 01:32:28,200
i 假假

1199
01:32:28,200 --> 01:32:29,200
大家看见没有

1200
01:32:29,200 --> 01:32:32,200
这一个loop我啥事都不干是吧

1201
01:32:32,200 --> 01:32:34,200
但是我想他循环这么多次

1202
01:32:34,200 --> 01:32:35,200
从而体现是吧

1203
01:32:35,200 --> 01:32:39,200
这一个function是非常非常昂贵的function对吧

1204
01:32:39,200 --> 01:32:43,200
然后最后return一个把这里的参数下进去number

1205
01:32:43,200 --> 01:32:45,200
number乘以2

1206
01:32:45,200 --> 01:32:50,200
这里我调用expansive font

1207
01:32:50,200 --> 01:32:51,200
把number放进去

1208
01:32:51,200 --> 01:32:52,200
哎

1209
01:32:52,200 --> 01:32:54,200
没问题吧

1210
01:32:54,200 --> 01:32:55,200
好

1211
01:32:55,200 --> 01:32:59,200
接下来再写一个东西叫做feme style

1212
01:32:59,200 --> 01:33:02,200
等于

1213
01:33:02,200 --> 01:33:05,200
这里直接写一个object

1214
01:33:05,200 --> 01:33:08,200
然后第一个是background

1215
01:33:08,200 --> 01:33:11,200
这里是如果是duff的话

1216
01:33:11,200 --> 01:33:13,200
background就是

1217
01:33:13,200 --> 01:33:16,200
否则就是白

1218
01:33:16,200 --> 01:33:17,200
他就是第一个

1219
01:33:17,200 --> 01:33:19,200
第二个是color

1220
01:33:19,200 --> 01:33:21,200
如果是duff的话

1221
01:33:21,200 --> 01:33:22,200
就是白是吧

1222
01:33:22,200 --> 01:33:25,200
就是黑底白字白底黑字的这样的一个概念

1223
01:33:25,200 --> 01:33:27,200
否则的话就是

1224
01:33:27,200 --> 01:33:28,200
黑

1225
01:33:28,200 --> 01:33:29,200
哎

1226
01:33:29,200 --> 01:33:30,200
没有

1227
01:33:30,200 --> 01:33:31,200
没有

1228
01:33:31,200 --> 01:33:32,200
没有

1229
01:33:32,200 --> 01:33:33,200
没有

1230
01:33:33,200 --> 01:33:34,200
没有

1231
01:33:34,200 --> 01:33:35,200
没有

1232
01:33:35,200 --> 01:33:36,200
没有

1233
01:33:36,200 --> 01:33:37,200
没有

1234
01:33:37,200 --> 01:33:38,200
没有

1235
01:33:38,200 --> 01:33:39,200
没有

1236
01:33:39,200 --> 01:33:40,200
没有

1237
01:33:40,200 --> 01:33:41,200
没有

1238
01:33:42,200 --> 01:33:44,200
没有问题吧

1239
01:33:44,200 --> 01:33:46,200
那么feme就先好了

1240
01:33:46,200 --> 01:33:48,200
好 下来可以写什么

1241
01:33:48,200 --> 01:33:52,200
random result

1242
01:33:52,200 --> 01:33:54,200
现在里面放一个fragment

1243
01:33:54,200 --> 01:33:55,200
在fragment当中

1244
01:33:55,200 --> 01:33:57,200
一个事情放一个input

1245
01:33:57,200 --> 01:33:59,200
input the type

1246
01:33:59,200 --> 01:34:00,200
很明显是number对吧

1247
01:34:00,200 --> 01:34:03,200
因为我们之前的状态管理是number

1248
01:34:03,200 --> 01:34:06,200
应该是一个stream

1249
01:34:06,200 --> 01:34:07,200
然后接下来

1250
01:34:07,200 --> 01:34:09,200
value跟咱们的number

1251
01:34:09,200 --> 01:34:11,200
进行一个绑定

1252
01:34:11,200 --> 01:34:12,200
然后再接下来

1253
01:34:12,200 --> 01:34:14,200
咱们再写一个unchanged

1254
01:34:14,200 --> 01:34:18,200
很明显unchanged要干嘛

1255
01:34:18,200 --> 01:34:20,200
unchanged要set number 是吧

1256
01:34:20,200 --> 01:34:22,200
就做一个二维的绑定嘛

1257
01:34:22,200 --> 01:34:24,200
two-way bonding

1258
01:34:24,200 --> 01:34:25,200
好 所以的话呢

1259
01:34:25,200 --> 01:34:27,200
咱们写一个part-in

1260
01:34:27,200 --> 01:34:33,200
把stream处理成一个

1261
01:34:33,200 --> 01:34:34,200
number没问题吧

1262
01:34:34,200 --> 01:34:36,200
咱们的input就写完了吧

1263
01:34:36,200 --> 01:34:38,200
然后加一个币国号

1264
01:34:38,200 --> 01:34:43,200
这是咱们的input

1265
01:34:43,200 --> 01:34:48,200
咱们这里再写一个button

1266
01:34:48,200 --> 01:34:49,200
button里面

1267
01:34:49,200 --> 01:34:51,200
the text叫做changed theme

1268
01:34:51,200 --> 01:34:52,200
那很明显

1269
01:34:52,200 --> 01:34:55,200
unclick event for this button

1270
01:34:55,200 --> 01:34:56,200
我要干嘛

1271
01:34:56,200 --> 01:34:58,200
我要toggle咱们

1272
01:34:58,200 --> 01:35:01,200
之前定义的dark的池对不对

1273
01:35:01,200 --> 01:35:04,200
所以是set start

1274
01:35:04,200 --> 01:35:11,200
然后preve

1275
01:35:11,200 --> 01:35:12,200
这个写法

1276
01:35:12,200 --> 01:35:13,200
你们还记得吧

1277
01:35:13,200 --> 01:35:14,200
是吧

1278
01:35:14,200 --> 01:35:17,200
就是derive state from previous state

1279
01:35:17,200 --> 01:35:19,200
没问题吧

1280
01:35:19,200 --> 01:35:22,200
好 最后一个tag是一个d

1281
01:35:22,200 --> 01:35:23,200
非常简单

1282
01:35:23,200 --> 01:35:25,200
这里我只是想来显示

1283
01:35:25,200 --> 01:35:27,200
我的double number

1284
01:35:27,200 --> 01:35:28,200
没问题吧

1285
01:35:28,200 --> 01:35:30,200
好 当然因为咱们这里有themed total 是吧

1286
01:35:30,200 --> 01:35:31,200
所以这里的stop

1287
01:35:31,200 --> 01:35:32,200
要把它装进去

1288
01:35:32,200 --> 01:35:33,200
咱们这里就直接的吧

1289
01:35:33,200 --> 01:35:36,200
写一个inline style

1290
01:35:36,200 --> 01:35:38,200
做demo選号

1291
01:35:38,200 --> 01:35:39,200
以此为止

1292
01:35:39,200 --> 01:35:42,200
我的东西就写完了

1293
01:35:42,200 --> 01:35:45,200
没问题吧

1294
01:35:45,200 --> 01:35:47,200
回到这里看一下

1295
01:35:47,200 --> 01:35:56,200
没有启动是吧

1296
01:35:56,200 --> 01:35:58,200
我不再改一下start

1297
01:35:58,200 --> 01:35:59,200
把它放到中间了

1298
01:35:59,200 --> 01:36:00,200
稍微好看一点

1299
01:36:00,200 --> 01:36:01,200
这里我直接写了

1300
01:36:01,200 --> 01:36:02,200
toggle

1301
01:36:02,200 --> 01:36:04,200
直接写一个style

1302
01:36:04,200 --> 01:36:06,200
这里写一个max width

1303
01:36:06,200 --> 01:36:10,200
比如说给它一个400px

1304
01:36:10,200 --> 01:36:13,200
然后margin

1305
01:36:13,200 --> 01:36:15,200
写一个auto

1306
01:36:15,200 --> 01:36:18,200
应该就可以把它做一个启动

1307
01:36:18,200 --> 01:36:21,200
没问题吧

1308
01:36:21,200 --> 01:36:26,200
没问题吧

1309
01:36:26,200 --> 01:36:29,200
automome看一下

1310
01:36:29,200 --> 01:36:30,200
在这里

1311
01:36:30,200 --> 01:36:34,200
当我改变input的时候

1312
01:36:34,200 --> 01:36:37,200
会触发set number

1313
01:36:37,200 --> 01:36:38,200
set number

1314
01:36:38,200 --> 01:36:40,200
会进而触发我的

1315
01:36:40,200 --> 01:36:42,200
组建的relandry

1316
01:36:42,200 --> 01:36:44,200
然后这里的第12行

1317
01:36:44,200 --> 01:36:45,200
会跑一遍

1318
01:36:45,200 --> 01:36:47,200
这没问题吧

1319
01:36:47,200 --> 01:36:48,200
对吧

1320
01:36:48,200 --> 01:36:53,200
比如说点一下

1321
01:36:53,200 --> 01:36:55,200
等一下

1322
01:37:00,200 --> 01:37:10,200
开始写一个0

1323
01:37:10,200 --> 01:37:14,200
我是不是少写一个0

1324
01:37:14,200 --> 01:37:20,200
这里的计算好像很快

1325
01:37:20,200 --> 01:37:21,200
卡住了是吧

1326
01:37:21,200 --> 01:37:22,200
再给它撿一个0

1327
01:37:22,200 --> 01:37:40,200
等一下啊

1328
01:37:40,200 --> 01:37:42,200
我来微调一下这个东西

1329
01:37:42,200 --> 01:37:44,200
我把我备课的这个东西放进来

1330
01:37:44,200 --> 01:37:46,200
本来是多少打一个0还是怎么样

1331
01:37:46,200 --> 01:37:51,200
应该是这样

1332
01:37:51,200 --> 01:37:52,200
OK好没问题

1333
01:37:52,200 --> 01:37:53,200
大家可以看见是吧

1334
01:37:53,200 --> 01:37:57,200
当我点这里的increase

1335
01:37:57,200 --> 01:37:59,200
或者decrease number的时候

1336
01:37:59,200 --> 01:38:01,200
你会发现会有一个lag

1337
01:38:01,200 --> 01:38:02,200
你看见没有

1338
01:38:02,200 --> 01:38:03,200
我现在点

1339
01:38:03,200 --> 01:38:05,200
然后等大概1秒之后

1340
01:38:05,200 --> 01:38:06,200
对吧

1341
01:38:06,200 --> 01:38:07,200
下面会更新

1342
01:38:07,200 --> 01:38:08,200
为什么

1343
01:38:08,200 --> 01:38:10,200
因为这个东西对吧

1344
01:38:10,200 --> 01:38:11,200
expensive function

1345
01:38:11,200 --> 01:38:12,200
没有问题吧

1346
01:38:12,200 --> 01:38:15,200
因为这个function会take long time to return

1347
01:38:15,200 --> 01:38:16,200
是吧

1348
01:38:16,200 --> 01:38:19,200
我们可以把它想象成一个比较复杂

1349
01:38:19,200 --> 01:38:20,200
比较昂贵

1350
01:38:20,200 --> 01:38:23,200
或者说像后端请求需要耗时的

1351
01:38:23,200 --> 01:38:24,200
一个async action

1352
01:38:24,200 --> 01:38:27,200
没问题吧

1353
01:38:27,200 --> 01:38:28,200
好

1354
01:38:28,200 --> 01:38:29,200
第一个问题问一下大家

1355
01:38:29,200 --> 01:38:32,200
当我点change theme的时候

1356
01:38:32,200 --> 01:38:37,200
会改变dark的值

1357
01:38:37,200 --> 01:38:38,200
那么请问

1358
01:38:38,200 --> 01:38:41,200
我点change theme来toggle theme的时候

1359
01:38:41,200 --> 01:38:43,200
会导致延时吗

1360
01:38:43,200 --> 01:38:45,200
你们可以在channel box里面来互动一下

1361
01:38:45,200 --> 01:38:49,200
会导致相同的延时吗

1362
01:38:49,200 --> 01:38:58,200
怎么也听懂我的问题吗

1363
01:38:58,200 --> 01:39:01,200
会

1364
01:39:01,200 --> 01:39:05,200
原因很简单对吧

1365
01:39:05,200 --> 01:39:07,200
因为是一样的一个机制吧

1366
01:39:07,200 --> 01:39:10,200
当我点了change theme

1367
01:39:10,200 --> 01:39:11,200
会setdark

1368
01:39:11,200 --> 01:39:15,200
setdark竟而影响整个组织的重新宣

1369
01:39:15,200 --> 01:39:16,200
那么double number

1370
01:39:16,200 --> 01:39:20,200
会被重新计算一次

1371
01:39:20,200 --> 01:39:21,200
是吧

1372
01:39:21,200 --> 01:39:23,200
但是很明显

1373
01:39:23,200 --> 01:39:24,200
现在对吧

1374
01:39:24,200 --> 01:39:27,200
一样有延时

1375
01:39:27,200 --> 01:39:29,200
有必要吗

1376
01:39:29,200 --> 01:39:34,200
change theme的时候的这一个延时有必要吗

1377
01:39:34,200 --> 01:39:35,200
是没有必要的吧

1378
01:39:35,200 --> 01:39:38,200
因为它并没有影响这里的结果对不对

1379
01:39:38,200 --> 01:39:42,200
咱们是用同样的计算重新发生了一次

1380
01:39:42,200 --> 01:39:45,200
导致了组建分新的延迟

1381
01:39:45,200 --> 01:39:48,200
但却没有任何实际的作用对不对

1382
01:39:48,200 --> 01:39:50,200
课文明白的意思吧

1383
01:39:50,200 --> 01:39:51,200
是吧

1384
01:39:51,200 --> 01:39:54,200
我在dism的时候也会导致延时

1385
01:39:54,200 --> 01:39:56,200
是因为它会被重新计算一遍

1386
01:39:56,200 --> 01:39:59,200
而是拿旧的number只需做一个计算

1387
01:39:59,200 --> 01:40:02,200
所以哪怕最后结果咱们知道是一样

1388
01:40:02,200 --> 01:40:06,200
它也会导致渲染的一个delay

1389
01:40:06,200 --> 01:40:08,200
怎么办

1390
01:40:08,200 --> 01:40:11,200
如果能有一个方法

1391
01:40:11,200 --> 01:40:14,200
把它的直K是租

1392
01:40:14,200 --> 01:40:18,200
然后咱们来自定义触发条件

1393
01:40:18,200 --> 01:40:19,200
对吧

1394
01:40:19,200 --> 01:40:21,200
这个条件就是只有到number改变的时候

1395
01:40:21,200 --> 01:40:23,200
你再给我重新计算

1396
01:40:23,200 --> 01:40:25,200
问题就可以得到解决了吗

1397
01:40:25,200 --> 01:40:28,200
这时候咱们就可以用use memo

1398
01:40:28,200 --> 01:40:30,200
so use memo

1399
01:40:30,200 --> 01:40:32,200
use memory

1400
01:40:32,200 --> 01:40:33,200
对吧

1401
01:40:33,200 --> 01:40:35,200
把这个值给存起来

1402
01:40:35,200 --> 01:40:39,200
两个参数跟咱们的use effect非常的像

1403
01:40:39,200 --> 01:40:42,200
第一个参数是你们要执行的内容

1404
01:40:42,200 --> 01:40:44,200
这个内容是什么

1405
01:40:47,200 --> 01:40:49,200
很明显是

1406
01:40:55,200 --> 01:40:56,200
没问题吧

1407
01:40:56,200 --> 01:40:59,200
它的条件呢

1408
01:40:59,200 --> 01:41:01,200
怎么应该放一个number

1409
01:41:01,200 --> 01:41:02,200
没问题吧

1410
01:41:02,200 --> 01:41:03,200
什么意思

1411
01:41:03,200 --> 01:41:07,200
这是只有当number改变的时候

1412
01:41:07,200 --> 01:41:11,200
请你触发中间的

1413
01:41:11,200 --> 01:41:13,200
function来给我return一个新的值

1414
01:41:13,200 --> 01:41:14,200
不然的话

1415
01:41:14,200 --> 01:41:16,200
上一次计算出来的结果

1416
01:41:16,200 --> 01:41:17,200
麻烦你case住

1417
01:41:17,200 --> 01:41:18,200
我不需要重新计算

1418
01:41:18,200 --> 01:41:20,200
就是这个意思吧

1419
01:41:20,200 --> 01:41:21,200
memory

1420
01:41:21,200 --> 01:41:25,200
记住我上一次计算过后的值

1421
01:41:25,200 --> 01:41:27,200
好 下来我们再看

1422
01:41:27,200 --> 01:41:28,200
那怎么可以看到是吧

1423
01:41:28,200 --> 01:41:30,200
change theme是即时触发

1424
01:41:30,200 --> 01:41:31,200
没问题吧

1425
01:41:31,200 --> 01:41:35,200
因为它不会再去跑在一个昂贵的过程吧

1426
01:41:38,200 --> 01:41:40,200
你懂不懂理解吗

1427
01:41:40,200 --> 01:41:43,200
是吧 这是use memo

1428
01:41:45,200 --> 01:41:48,200
好 这是use memo的其中一种用法

1429
01:41:50,200 --> 01:41:52,200
好 咱们现在多一个需求

1430
01:41:55,200 --> 01:41:57,200
我们在下面放一个use effect

1431
01:41:59,200 --> 01:42:01,200
我的第二个需求是

1432
01:42:01,200 --> 01:42:08,200
我想要打出来一个log

1433
01:42:08,200 --> 01:42:12,200
当 theme style改变的时候

1434
01:42:12,200 --> 01:42:14,200
或者说当我去toggle theme的时候

1435
01:42:14,200 --> 01:42:16,200
我需要打出一个log

1436
01:42:21,200 --> 01:42:23,200
theme has changed

1437
01:42:23,200 --> 01:42:24,200
点点点

1438
01:42:25,200 --> 01:42:29,200
那么没问题吧

1439
01:42:32,200 --> 01:42:33,200
按掉它

1440
01:42:33,200 --> 01:42:34,200
change theme的时候

1441
01:42:34,200 --> 01:42:35,200
theme has changed

1442
01:42:35,200 --> 01:42:36,200
看我的右边

1443
01:42:39,200 --> 01:42:40,200
现在问题是

1444
01:42:40,200 --> 01:42:43,200
当我改变input值的时候

1445
01:42:43,200 --> 01:42:45,200
请问theme has changed

1446
01:42:45,200 --> 01:42:47,200
这一行log会被打出来吗

1447
01:42:51,200 --> 01:42:52,200
我们互动一下

1448
01:42:53,200 --> 01:42:54,200
你觉得会被打出来吗

1449
01:42:59,200 --> 01:43:01,200
当我改变input的时候

1450
01:43:04,200 --> 01:43:06,200
use effect里面的这一行会被触发吗

1451
01:43:06,200 --> 01:43:08,200
我的第二十二行

1452
01:43:10,200 --> 01:43:11,200
几八同学呢

1453
01:43:23,200 --> 01:43:26,200
别别说为什么它会被触发

1454
01:43:28,200 --> 01:43:30,200
因为这个theme style

1455
01:43:30,200 --> 01:43:32,200
它会每一次放的时候

1456
01:43:32,200 --> 01:43:34,200
产生一个新的object

1457
01:43:34,200 --> 01:43:36,200
然后trigger下面的use effect

1458
01:43:38,200 --> 01:43:39,200
更准确的来说

1459
01:43:39,200 --> 01:43:41,200
不应该是新的object

1460
01:43:41,200 --> 01:43:42,200
应该是新的reference 是吧

1461
01:43:42,200 --> 01:43:44,200
object里面的池

1462
01:43:44,200 --> 01:43:45,200
应该是一样的 对不对

1463
01:43:46,200 --> 01:43:47,200
这就道理吧

1464
01:43:51,200 --> 01:43:54,200
是咱们在没有toggle theme的时候

1465
01:43:54,200 --> 01:43:56,200
每一次改变number

1466
01:43:58,200 --> 01:44:00,200
它都会拿到一个新的reference

1467
01:44:03,200 --> 01:44:04,200
换句话来说

1468
01:44:05,200 --> 01:44:06,200
咱们在use effect里

1469
01:44:06,200 --> 01:44:09,200
或者在任何的dependency里

1470
01:44:09,200 --> 01:44:10,200
输入了这一个东西

1471
01:44:10,200 --> 01:44:12,200
它做的是什么check

1472
01:44:13,200 --> 01:44:14,200
是reference check

1473
01:44:16,200 --> 01:44:17,200
没有问题吧

1474
01:44:19,200 --> 01:44:21,200
哪怕你object中间的

1475
01:44:21,200 --> 01:44:23,200
任何一个key value pad

1476
01:44:23,200 --> 01:44:24,200
值都没有变

1477
01:44:26,200 --> 01:44:28,200
只要你发生一个重新declared

1478
01:44:28,200 --> 01:44:29,200
重新assignment

1479
01:44:29,200 --> 01:44:31,200
重新复制的过程

1480
01:44:31,200 --> 01:44:32,200
都说明什么

1481
01:44:33,200 --> 01:44:34,200
都说明它的reference变了吧

1482
01:44:36,200 --> 01:44:38,200
进而会触发这里的use effect

1483
01:44:38,200 --> 01:44:39,200
没有问题吧

1484
01:44:46,200 --> 01:44:48,200
好 这就是use memo的

1485
01:44:48,200 --> 01:44:49,200
第二个用法

1486
01:44:50,200 --> 01:44:52,200
咱们可以用use memo把它包起来

1487
01:45:05,200 --> 01:45:06,200
里面来看一下

1488
01:45:08,200 --> 01:45:09,200
这是什么意思

1489
01:45:10,200 --> 01:45:12,200
只有当dark改变的时候

1490
01:45:13,200 --> 01:45:15,200
执行中间的方程

1491
01:45:15,200 --> 01:45:16,200
重新进行复制

1492
01:45:16,200 --> 01:45:17,200
不然的话

1493
01:45:19,200 --> 01:45:20,200
它的reference会被保留

1494
01:45:20,200 --> 01:45:22,200
对吧 在reranding当中

1495
01:45:22,200 --> 01:45:23,200
会被保留

1496
01:45:23,200 --> 01:45:24,200
没有问题吧

1497
01:45:26,200 --> 01:45:27,200
现在我们再回来看一看

1498
01:45:34,200 --> 01:45:35,200
删掉 是吧

1499
01:45:37,200 --> 01:45:38,200
每次点它的时候

1500
01:45:39,200 --> 01:45:41,200
这个log就消失

1501
01:45:41,200 --> 01:45:43,200
对吧 然后当我点change theme的时候

1502
01:45:45,200 --> 01:45:46,200
log就会出现

1503
01:45:47,200 --> 01:45:50,200
这就是use memo的两种用法

1504
01:45:50,200 --> 01:45:51,200
或者说两种用途

1505
01:45:51,200 --> 01:45:52,200
同学们有什么问题吗

1506
01:45:56,200 --> 01:45:57,200
非常重要的一个概念

1507
01:45:57,200 --> 01:45:58,200
同学们有什么问题吗

1508
01:46:11,200 --> 01:46:12,200
他说

1509
01:46:12,200 --> 01:46:14,200
use memo的dependency里

1510
01:46:14,200 --> 01:46:15,200
不放reference value是吗

1511
01:46:18,200 --> 01:46:19,200
你也可以放

1512
01:46:19,200 --> 01:46:20,200
但是你要知道

1513
01:46:20,200 --> 01:46:22,200
你放的目的是什么 对吧

1514
01:46:23,200 --> 01:46:25,200
所以它没有禁止你放reference value

1515
01:46:26,200 --> 01:46:28,200
但如果你放了reference value之外

1516
01:46:28,200 --> 01:46:29,200
它可能并不是

1517
01:46:29,200 --> 01:46:30,200
你想象的那样的工作

1518
01:46:30,200 --> 01:46:31,200
是吧 我们要记得

1519
01:46:31,200 --> 01:46:32,200
它做的是reference check

1520
01:46:32,200 --> 01:46:33,200
明白这个意思吗

1521
01:46:35,200 --> 01:46:37,200
当然在咱们的这一个类似当中

1522
01:46:37,200 --> 01:46:39,200
是不能放reference value的

1523
01:46:39,200 --> 01:46:40,200
是吧 也没有reference value给你放

1524
01:46:40,200 --> 01:46:41,200
因为咱们的dependency

1525
01:46:41,200 --> 01:46:43,200
它就是一个primitive 对不对

1526
01:46:48,200 --> 01:46:49,200
我们的dependency

1527
01:46:49,200 --> 01:46:50,200
它就是一个primitive

1528
01:46:50,200 --> 01:46:51,200
对吧

1529
01:46:51,200 --> 01:46:52,200
我们的dependency

1530
01:46:52,200 --> 01:46:53,200
它就是一个primitive

1531
01:46:53,200 --> 01:46:54,200
对吧

1532
01:46:54,200 --> 01:46:55,200
我们的dependency

1533
01:46:55,200 --> 01:46:56,200
它就是一个primitive

1534
01:46:56,200 --> 01:46:57,200
对吧

1535
01:46:57,200 --> 01:46:58,200
我们的dependency

1536
01:46:58,200 --> 01:46:59,200
它就是一个primitive

1537
01:46:59,200 --> 01:47:00,200
对吧

1538
01:47:00,200 --> 01:47:01,200
这个椅子

1539
01:47:01,200 --> 01:47:02,200
有一些 Justice

1540
01:47:02,200 --> 01:47:07,200
swinging

1541
01:47:07,200 --> 01:47:08,200
没问题

1542
01:47:11,200 --> 01:47:12,200
给你的同学呢

1543
01:47:14,200 --> 01:47:16,200
没问题 我们就过了

1544
01:47:26,200 --> 01:47:28,200
我们来看第二个Hook

1545
01:47:28,200 --> 01:47:29,200
就个use all back

1546
01:47:31,200 --> 01:47:33,200
call back

1547
01:47:36,200 --> 01:47:37,200
再use call back 里

1548
01:47:39,200 --> 01:47:40,200
第一个 file

1549
01:47:40,200 --> 01:47:42,200
叫做use call back.js

1550
01:47:42,200 --> 01:47:44,200
还明显是一个组件

1551
01:47:44,200 --> 01:47:45,200
it counts

1552
01:47:45,200 --> 01:47:47,200
use call back 等于

1553
01:47:51,200 --> 01:47:52,200
那么一样

1554
01:47:52,200 --> 01:47:53,200
在我打的过程当中

1555
01:47:53,200 --> 01:47:55,200
来看一看它的逻辑

1556
01:47:57,200 --> 01:47:58,200
export

1557
01:47:58,200 --> 01:47:59,200
efort

1558
01:48:00,200 --> 01:48:04,200
大线use call back

1559
01:48:04,200 --> 01:48:05,200
没问题吧

1560
01:48:06,200 --> 01:48:07,200
咱们一样

1561
01:48:08,200 --> 01:48:09,200
管理两个state

1562
01:48:19,200 --> 01:48:20,200
state 也一样

1563
01:48:20,200 --> 01:48:21,200
一个是

1564
01:48:25,200 --> 01:48:26,200
一个是

1565
01:48:27,200 --> 01:48:28,200
dark

1566
01:48:30,200 --> 01:48:31,200
分别给上一样的估计值

1567
01:48:31,200 --> 01:48:32,200
分别是0和

1568
01:48:35,200 --> 01:48:36,200
好 接下来这里

1569
01:48:36,200 --> 01:48:37,200
我来写一个

1570
01:48:37,200 --> 01:48:39,200
function 叫做getItem

1571
01:48:40,200 --> 01:48:41,200
等于

1572
01:48:44,200 --> 01:48:45,200
这里非常简单

1573
01:48:45,200 --> 01:48:46,200
我直接return一个数字

1574
01:48:46,200 --> 01:48:48,200
在number的基础上

1575
01:48:50,200 --> 01:48:51,200
加1

1576
01:48:53,200 --> 01:48:54,200
再加1

1577
01:48:55,200 --> 01:48:56,200
没问题吧

1578
01:48:57,200 --> 01:48:58,200
好 接下来一样

1579
01:48:58,200 --> 01:48:59,200
写一个 theme

1580
01:49:10,200 --> 01:49:11,200
back row

1581
01:49:11,200 --> 01:49:12,200
dark的话

1582
01:49:14,200 --> 01:49:15,200
就是flat

1583
01:49:16,200 --> 01:49:17,200
否则就是

1584
01:49:18,200 --> 01:49:19,200
这个逻辑跟我们之前

1585
01:49:19,200 --> 01:49:20,200
是一样的吧

1586
01:49:20,200 --> 01:49:21,200
然后color 也是

1587
01:49:21,200 --> 01:49:22,200
我们就是黑

1588
01:49:22,200 --> 01:49:23,200
底配 红字

1589
01:49:23,200 --> 01:49:24,200
或者是

1590
01:49:24,200 --> 01:49:25,200
白底配

1591
01:49:26,200 --> 01:49:27,200
黑字

1592
01:49:28,200 --> 01:49:29,200
黑字

1593
01:49:40,200 --> 01:49:41,200
好 接下来

1594
01:49:41,200 --> 01:49:42,200
我们可以写

1595
01:49:42,200 --> 01:49:43,200
random result

1596
01:49:51,200 --> 01:49:52,200
input

1597
01:49:53,200 --> 01:49:55,200
type 依然是 number

1598
01:49:58,200 --> 01:49:59,200
value 等于

1599
01:49:59,200 --> 01:50:00,200
咱们的number

1600
01:50:00,200 --> 01:50:01,200
这个没有变数吧

1601
01:50:01,200 --> 01:50:02,200
跟之前是一模一样的

1602
01:50:02,200 --> 01:50:03,200
然后unchanged

1603
01:50:03,200 --> 01:50:04,200
也是一模一样的

1604
01:50:05,200 --> 01:50:06,200
好 这里就咱们就顺手

1605
01:50:06,200 --> 01:50:07,200
因为它写掉是

1606
01:50:10,200 --> 01:50:11,200
set number

1607
01:50:11,200 --> 01:50:12,200
然后

1608
01:50:12,200 --> 01:50:13,200
这里的part

1609
01:50:14,200 --> 01:50:15,200
int

1610
01:50:15,200 --> 01:50:16,200
里面是e.

1611
01:50:17,200 --> 01:50:19,200
arget.value

1612
01:50:20,200 --> 01:50:21,200
然后最后把它

1613
01:50:22,200 --> 01:50:23,200
关起来

1614
01:50:24,200 --> 01:50:25,200
没问题吧

1615
01:50:25,200 --> 01:50:26,200
这里咱们也有一个button

1616
01:50:29,200 --> 01:50:31,200
button 跟之前也一样是吧

1617
01:50:31,200 --> 01:50:32,200
叫做change

1618
01:50:36,200 --> 01:50:37,200
fin

1619
01:50:37,200 --> 01:50:39,200
这里咱们有一个unclick

1620
01:50:44,200 --> 01:50:45,200
that

1621
01:50:46,200 --> 01:50:47,200
dark

1622
01:50:47,200 --> 01:50:48,200
3

1623
01:50:51,200 --> 01:50:52,200
没问题吧

1624
01:50:53,200 --> 01:50:55,200
这里我再多写一个组件

1625
01:50:58,200 --> 01:51:01,200
叫做list.js

1626
01:51:10,200 --> 01:51:11,200
list 等于

1627
01:51:13,200 --> 01:51:14,200
好 这里

1628
01:51:15,200 --> 01:51:17,200
我来放一个props

1629
01:51:18,200 --> 01:51:19,200
get item

1630
01:51:19,200 --> 01:51:20,200
这个时候我把它discard出来

1631
01:51:20,200 --> 01:51:21,200
是吧

1632
01:51:21,200 --> 01:51:22,200
不然的话可以写一个props

1633
01:51:22,200 --> 01:51:23,200
然后props.

1634
01:51:23,200 --> 01:51:24,200
get items 也行

1635
01:51:24,200 --> 01:51:25,200
这里没有区别

1636
01:51:25,200 --> 01:51:26,200
而且的话

1637
01:51:27,200 --> 01:51:29,200
多一个自己的local state

1638
01:51:29,200 --> 01:51:30,200
叫做items

1639
01:51:31,200 --> 01:51:33,200
set items

1640
01:51:36,200 --> 01:51:37,200
use state

1641
01:51:40,200 --> 01:51:41,200
use effect

1642
01:51:45,200 --> 01:51:47,200
这里我来看get items

1643
01:51:47,200 --> 01:51:48,200
作为dependency

1644
01:51:50,200 --> 01:51:51,200
这里我来set我的items

1645
01:51:52,200 --> 01:51:54,200
等于get items直接调用它

1646
01:51:57,200 --> 01:51:58,200
然后return

1647
01:51:59,200 --> 01:52:00,200
items.map

1648
01:52:21,200 --> 01:52:22,200
还没问题吧

1649
01:52:26,200 --> 01:52:27,200
就给一个主持是吧

1650
01:52:28,200 --> 01:52:29,200
这个我报错了

1651
01:52:30,200 --> 01:52:32,200
然后回到usb callback当中

1652
01:52:36,200 --> 01:52:38,200
这里直接用上list

1653
01:52:46,200 --> 01:52:47,200
还没有xbox是吧

1654
01:52:51,200 --> 01:52:52,200
没有xbox

1655
01:53:06,200 --> 01:53:07,200
没问题吧

1656
01:53:07,200 --> 01:53:08,200
还有一个sim是吧

1657
01:53:08,200 --> 01:53:09,200
把sim也放上去

1658
01:53:15,200 --> 01:53:16,200
然后回到app当中

1659
01:53:18,200 --> 01:53:19,200
把它标准着

1660
01:53:21,200 --> 01:53:22,200
cd

1661
01:53:26,200 --> 01:53:27,200
cd

1662
01:53:30,200 --> 01:53:31,200
cd

1663
01:53:37,200 --> 01:53:38,200
cd

1664
01:53:42,200 --> 01:53:43,200
cd

1665
01:53:43,200 --> 01:53:44,200
cd

1666
01:53:45,200 --> 01:53:46,200
cd

1667
01:53:46,200 --> 01:53:47,200
cd

1668
01:53:49,200 --> 01:53:50,200
cd

1669
01:53:50,200 --> 01:53:51,200
,cd

1670
01:53:54,200 --> 01:53:55,200
cd

1671
01:53:56,200 --> 01:53:57,200
cd

1672
01:53:59,200 --> 01:54:00,200
cd

1673
01:54:01,200 --> 01:54:02,200
cd

1674
01:54:03,200 --> 01:54:04,200
cd

1675
01:54:05,200 --> 01:54:06,200
cd

1676
01:54:07,200 --> 01:54:08,200
cd

1677
01:54:09,200 --> 01:54:10,200
cd

1678
01:54:11,200 --> 01:54:12,200
cd

1679
01:54:13,200 --> 01:54:14,200
cd

1680
01:54:15,200 --> 01:54:16,200
cd

1681
01:54:17,200 --> 01:54:18,200
cd

1682
01:54:18,200 --> 01:54:48,200


1683
01:54:48,200 --> 01:55:18,200


1684
01:55:18,200 --> 01:55:48,200


1685
01:55:48,200 --> 01:56:18,200


1686
01:56:18,200 --> 01:56:48,200


1687
01:56:48,200 --> 01:56:49,200
,cd

1688
01:56:52,200 --> 01:56:53,200
cd

1689
01:56:55,200 --> 01:56:56,200
cd

1690
01:56:57,200 --> 01:56:58,200
cd

1691
01:56:59,200 --> 01:57:00,200
cd

1692
01:57:01,200 --> 01:57:02,200
cd

1693
01:57:03,200 --> 01:57:04,200
cd

1694
01:57:05,200 --> 01:57:06,200
cd

1695
01:57:07,200 --> 01:57:08,200
cd

1696
01:57:09,200 --> 01:57:10,200
cd

1697
01:57:12,200 --> 01:57:13,200
cd

1698
01:57:14,200 --> 01:57:15,200
cd

1699
01:57:15,200 --> 01:57:16,200
cd

1700
01:57:28,200 --> 01:57:29,200
cd

1701
01:57:30,200 --> 01:57:31,200
cd

1702
01:57:31,200 --> 01:57:32,200
cd

1703
01:57:33,200 --> 01:57:34,200
cd

1704
01:57:35,200 --> 01:57:36,200
cd

1705
01:57:36,200 --> 01:57:37,200
cd

1706
01:57:37,200 --> 01:57:38,200
cd

1707
01:57:38,200 --> 01:57:39,200
cd

1708
01:57:40,200 --> 01:57:41,200
cd

1709
01:57:42,200 --> 01:57:43,200
cd

1710
01:57:43,200 --> 01:57:44,200
cd

1711
01:57:45,200 --> 01:57:46,200
cd

1712
01:57:49,200 --> 01:57:50,200
cd

1713
01:57:53,200 --> 01:57:54,200
cd

1714
01:57:56,200 --> 01:57:57,200
cd

1715
01:57:59,200 --> 01:58:00,200
cd

1716
01:58:01,200 --> 01:58:02,200
cd

1717
01:58:03,200 --> 01:58:04,200
cd

1718
01:58:04,200 --> 01:58:05,200
cd

1719
01:58:07,200 --> 01:58:08,200
cd

1720
01:58:09,200 --> 01:58:10,200
cd

1721
01:58:11,200 --> 01:58:12,200
cd

1722
01:58:13,200 --> 01:58:14,200
Cd

1723
01:58:17,200 --> 01:58:18,200
cd

1724
01:58:19,200 --> 01:58:20,200
cd

1725
01:58:22,200 --> 01:58:23,200
cd

1726
01:58:24,200 --> 01:58:25,200
cd

1727
01:58:26,200 --> 01:58:27,200
cd

1728
01:58:28,200 --> 01:58:29,200
cd

1729
01:58:30,200 --> 01:58:31,200
cd

1730
01:58:32,200 --> 01:58:33,200
cd

1731
01:58:34,200 --> 01:58:35,200
cd

1732
01:58:36,200 --> 01:58:37,200
cd

1733
01:58:37,200 --> 01:58:42,200
cd

1734
01:58:48,200 --> 01:58:49,200
cd

1735
01:58:56,200 --> 01:58:57,200
cd

1736
01:58:59,200 --> 01:59:00,200
cd

1737
01:59:02,200 --> 01:59:03,200
cd

1738
01:59:04,200 --> 01:59:05,200
cd

1739
01:59:05,200 --> 01:59:35,200


1740
01:59:35,200 --> 02:00:05,200


1741
02:00:05,200 --> 02:00:35,200


1742
02:00:35,200 --> 02:01:05,200


1743
02:01:05,200 --> 02:01:06,200
,没问题吧?

1744
02:01:06,200 --> 02:01:09,200
然后name的初始值,咱们给一个空的3

1745
02:01:13,200 --> 02:01:15,200
之后咱们直接return,是吧?

1746
02:01:15,200 --> 02:01:18,200
这个function非常的,这个组件非常的简单

1747
02:01:18,200 --> 02:01:20,200
咱们直接return

1748
02:01:25,200 --> 02:01:27,200
第一个是input

1749
02:01:29,200 --> 02:01:31,200
对,一样咱们给它一个答案

1750
02:01:32,200 --> 02:01:34,200
等于text

1751
02:01:35,200 --> 02:01:38,200
然后value,给它做一个绑定,等于name

1752
02:01:39,200 --> 02:01:41,200
然后unchange,一样做一个绑定

1753
02:01:43,200 --> 02:01:46,200
等于set name

1754
02:01:46,200 --> 02:01:47,200
e.

1755
02:01:48,200 --> 02:01:49,200
hugget.

1756
02:01:50,200 --> 02:01:52,200
没问题吧?很简单

1757
02:01:57,200 --> 02:01:59,200
然后接下来把名字打出来

1758
02:02:01,200 --> 02:02:03,200
my name

1759
02:02:05,200 --> 02:02:06,200
is

1760
02:02:07,200 --> 02:02:09,200
非常简单的那个组件

1761
02:02:09,200 --> 02:02:11,200
把它export

1762
02:02:12,200 --> 02:02:15,200
default useRef

1763
02:02:17,200 --> 02:02:20,200
然后在app里,把它也给标注试掉

1764
02:02:20,200 --> 02:02:22,200
咱们这次用useRef

1765
02:02:22,200 --> 02:02:23,200
组件

1766
02:02:26,200 --> 02:02:28,200
哇,非常简单,对吧?

1767
02:02:28,200 --> 02:02:30,200
这里的话,比如说,my name is

1768
02:02:32,200 --> 02:02:35,200
第一个任务给同学们

1769
02:02:39,200 --> 02:02:41,200
我想计算

1770
02:02:42,200 --> 02:02:44,200
useRef 组件

1771
02:02:44,200 --> 02:02:46,200
randowing 的次数

1772
02:02:46,200 --> 02:02:48,200
并且把它打在下面

1773
02:02:48,200 --> 02:02:50,200
同学们要怎么做

1774
02:02:53,200 --> 02:02:55,200
是吧,这里我要打一个

1775
02:02:56,200 --> 02:02:59,200
I have rendered

1776
02:03:00,200 --> 02:03:02,200
x times

1777
02:03:03,200 --> 02:03:05,200
算吧,怎么做

1778
02:03:06,200 --> 02:03:08,200
你们要试一下吗

1779
02:03:11,200 --> 02:03:13,200
与辰同学今天方便开卖吗

1780
02:03:17,200 --> 02:03:19,200
OK,试一下

1781
02:03:20,200 --> 02:03:22,200
你的第一想法是什么

1782
02:03:22,200 --> 02:03:25,200
我怎么样来计算randowing 的次数

1783
02:03:26,200 --> 02:03:28,200
我应该是

1784
02:03:29,200 --> 02:03:31,200
要写的,如果

1785
02:03:31,200 --> 02:03:33,200
我的想法是写use effect

1786
02:03:33,200 --> 02:03:35,200
然后跟它的

1787
02:03:39,200 --> 02:03:40,200
然后

1788
02:03:40,200 --> 02:03:42,200
很聪明是吧,这里只要

1789
02:03:42,200 --> 02:03:44,200
第二个参数什么都不放,说明它每次

1790
02:03:44,200 --> 02:03:47,200
组件更新的时候都会跑里面的东西,对吧

1791
02:03:48,200 --> 02:03:50,200
接下来你要用什么东西

1792
02:03:50,200 --> 02:03:52,200
来keep它的值呢

1793
02:03:55,200 --> 02:03:57,200
那我

1794
02:04:01,200 --> 02:04:03,200
我应该是keep的是那个

1795
02:04:03,200 --> 02:04:05,200
1.hacketValue

1796
02:04:05,200 --> 02:04:07,200
就是setName 的值吗

1797
02:04:07,200 --> 02:04:09,200
为什么keep setName

1798
02:04:09,200 --> 02:04:11,200
不是,这里是x,是吧

1799
02:04:11,200 --> 02:04:13,200
咱们是要

1800
02:04:13,200 --> 02:04:15,200
装一个数字,对吧,装一个number

1801
02:04:15,200 --> 02:04:17,200
对对对

1802
02:04:17,200 --> 02:04:21,200
我应该是记录的是 unchanged 的次数嘛

1803
02:04:21,200 --> 02:04:23,200
对,randowing 的次数,是吧

1804
02:04:24,200 --> 02:04:26,200
怎么办,要怎么记录

1805
02:04:26,200 --> 02:04:27,200
use effect 里面放什么

1806
02:04:27,200 --> 02:04:29,200
首先,第一个问题是

1807
02:04:29,200 --> 02:04:31,200
比如,这个x,你要用什么来装它

1808
02:04:31,200 --> 02:04:33,200
要用local state 来装它吗

1809
02:04:37,200 --> 02:04:39,200
follow your heart

1810
02:04:39,200 --> 02:04:41,200
咱们得先得有个解,不管这个解对不对

1811
02:04:41,200 --> 02:04:43,200
这么正确,高不高效,咱们先得有个解是吧

1812
02:04:43,200 --> 02:04:45,200
面试当中也是这样

1813
02:04:45,200 --> 02:04:47,200
拿到一个题,先得有一个解

1814
02:04:47,200 --> 02:04:49,200
然后再优化它

1815
02:04:49,200 --> 02:04:52,200
那就拿use state 记录它

1816
02:04:53,200 --> 02:04:55,200
拿一个use state,可以去记录它

1817
02:04:56,200 --> 02:04:58,200
Randowing

1818
02:04:58,200 --> 02:05:00,200
然后set

1819
02:05:00,200 --> 02:05:02,200
Randowing

1820
02:05:02,200 --> 02:05:04,200
等于use state

1821
02:05:04,200 --> 02:05:06,200
处置是给什么,给0,好吧

1822
02:05:08,200 --> 02:05:10,200
这里的话,我就可以把它打,除了2,对不对

1823
02:05:10,200 --> 02:05:14,200
然后在这里,每一次触发根经的时候

1824
02:05:14,200 --> 02:05:16,200
pref 等于

1825
02:05:16,200 --> 02:05:18,200
pref加1

1826
02:05:19,200 --> 02:05:20,200
这样吧

1827
02:05:20,200 --> 02:05:21,200
嗯

1828
02:05:21,200 --> 02:05:23,200
有什么问题啊

1829
02:05:34,200 --> 02:05:35,200
为什么会这样

1830
02:05:41,200 --> 02:05:44,200
它写就是那个

1831
02:05:44,200 --> 02:05:46,200
Cost setting setting

1832
02:05:46,200 --> 02:05:48,200
Components 被调用在

1833
02:05:48,200 --> 02:05:50,200
Use Effect 这里

1834
02:05:50,200 --> 02:05:52,200
这是一个经典的

1835
02:05:52,200 --> 02:05:54,200
无线循环的问题,是吧

1836
02:05:56,200 --> 02:05:57,200
非常经典,对吧

1837
02:05:57,200 --> 02:05:59,200
每一次更新

1838
02:05:59,200 --> 02:06:01,200
触发一个set rendering

1839
02:06:01,200 --> 02:06:03,200
set rendering 再触发一个更新

1840
02:06:03,200 --> 02:06:05,200
然后再触发set rendering

1841
02:06:05,200 --> 02:06:07,200
再触发一次更新,实际是吧

1842
02:06:08,200 --> 02:06:10,200
你形成了一个壁环

1843
02:06:10,200 --> 02:06:12,200
而且跑不出去,对不对

1844
02:06:13,200 --> 02:06:14,200
嗯

1845
02:06:14,200 --> 02:06:16,200
所以咱们用set

1846
02:06:16,200 --> 02:06:19,200
咱们用use state 的方法能不能做到

1847
02:06:19,200 --> 02:06:21,200
记录,每一次 rendering 的次数啊

1848
02:06:21,200 --> 02:06:23,200
其实做不到的,对吧

1849
02:06:24,200 --> 02:06:26,200
试试意思吧,咱们是做不到的,对不对

1850
02:06:28,200 --> 02:06:29,200
那要怎么办

1851
02:06:33,200 --> 02:06:35,200
所以现在咱们的问题是吧

1852
02:06:35,200 --> 02:06:37,200
咱们把问题 narrow down 到

1853
02:06:39,200 --> 02:06:40,200
如果

1854
02:06:43,200 --> 02:06:45,200
咱们能每一次更新的时候

1855
02:06:45,200 --> 02:06:47,200
来增加一个

1856
02:06:47,200 --> 02:06:49,200
比如说一个

1857
02:06:49,200 --> 02:06:50,200
类似 use state 或者说

1858
02:06:50,200 --> 02:06:52,200
在每一次

1859
02:06:52,200 --> 02:06:54,200
re rendering 的时候

1860
02:06:57,200 --> 02:06:59,200
来增加一个

1861
02:06:59,200 --> 02:07:00,200
variable 的 value 值

1862
02:07:00,200 --> 02:07:01,200
并且那个 variable

1863
02:07:01,200 --> 02:07:03,200
不会触发更新就好了

1864
02:07:03,200 --> 02:07:04,200
对吧,是这个意思吧

1865
02:07:13,200 --> 02:07:14,200
那怎么办

1866
02:07:15,200 --> 02:07:16,200
介绍一个东西

1867
02:07:21,200 --> 02:07:23,200
rand 的等于

1868
02:07:23,200 --> 02:07:25,200
use ref

1869
02:07:29,200 --> 02:07:30,200
use ref 干嘛的

1870
02:07:34,200 --> 02:07:35,200
reference

1871
02:07:35,200 --> 02:07:37,200
它会 return 一个东西出来

1872
02:07:37,200 --> 02:07:39,200
并且这个东西的结构是

1873
02:07:43,200 --> 02:07:44,200
长成这样的

1874
02:07:46,200 --> 02:07:49,200
它里面会有一个叫做 current 的 key

1875
02:07:49,200 --> 02:07:51,200
并且这个 key 你可以放任何东西

1876
02:07:51,200 --> 02:07:52,200
在里面

1877
02:07:54,200 --> 02:07:56,200
而 current 的改变

1878
02:07:56,200 --> 02:07:58,200
是不会触发,组建,渲染的

1879
02:07:58,200 --> 02:07:59,200
换句话来说

1880
02:07:59,200 --> 02:08:01,200
ref 的一个用法是什么

1881
02:08:01,200 --> 02:08:03,200
是在 re rendering 之间

1882
02:08:03,200 --> 02:08:05,200
保存一个东西

1883
02:08:05,200 --> 02:08:06,200
保存一个值

1884
02:08:06,200 --> 02:08:09,200
这个值不会因为 re rendering 而改变

1885
02:08:09,200 --> 02:08:11,200
那怎么办

1886
02:08:13,200 --> 02:08:14,200
是吧,那我们可以怎么做

1887
02:08:29,200 --> 02:08:30,200
我们把这个干掉是吧

1888
02:08:30,200 --> 02:08:31,200
不要注视点

1889
02:08:31,200 --> 02:08:32,200
这是一个经典的错误

1890
02:08:34,200 --> 02:08:35,200
还没有问题吧

1891
02:08:36,200 --> 02:08:37,200
好,这样的话

1892
02:08:37,200 --> 02:08:38,200
就成功的在

1893
02:08:38,200 --> 02:08:40,200
每一次渲染的时候

1894
02:08:43,200 --> 02:08:46,200
咱们都会去给一个值加一

1895
02:08:46,200 --> 02:08:49,200
来 track the number of renderings

1896
02:08:49,200 --> 02:08:53,200
并且它不会触发新的 rendering

1897
02:08:55,200 --> 02:08:56,200
那么接下来

1898
02:08:56,200 --> 02:08:57,200
怎么可以把 render on each

1899
02:09:05,200 --> 02:09:06,200
这里应该是用什么

1900
02:09:06,200 --> 02:09:08,200
rander.current 是吧

1901
02:09:08,200 --> 02:09:10,200
因为 render 本身是一个 object

1902
02:09:13,200 --> 02:09:14,200
那么看什么的意思

1903
02:09:14,200 --> 02:09:15,200
I have rendered

1904
02:09:15,200 --> 02:09:16,200
应该是出示值

1905
02:09:16,200 --> 02:09:17,200
给它一个 b 是吧

1906
02:09:35,200 --> 02:09:36,200
not a number

1907
02:09:38,200 --> 02:09:39,200
这是 b 是吧

1908
02:09:42,200 --> 02:09:45,200
Render 等于 use ref

1909
02:09:45,200 --> 02:09:47,200
然后 use ref 里面

1910
02:09:47,200 --> 02:09:50,200
放了一个 e 作为出示值

1911
02:09:51,200 --> 02:09:56,200
然后 render.current 等于 render.current 加一

1912
02:09:59,200 --> 02:10:01,200
然后最后打出来 render

1913
02:10:07,200 --> 02:10:09,200
然后最后打出来 render

1914
02:10:12,200 --> 02:10:13,200
OK,没有问题

1915
02:10:14,200 --> 02:10:15,200
那它们可以看见,是不是

1916
02:10:19,200 --> 02:10:21,200
是吧,我就成功的

1917
02:10:21,200 --> 02:10:23,200
储存了一个 number of rendering 值在这里

1918
02:10:23,200 --> 02:10:24,200
没有问题吧

1919
02:10:24,200 --> 02:10:26,200
并且它不会再去触发足迹的更新

1920
02:10:27,200 --> 02:10:28,200
是吧

1921
02:10:31,200 --> 02:10:34,200
好,这是 use ref 的一个用法

1922
02:10:35,200 --> 02:10:37,200
或者说其中的一个用途

1923
02:10:38,200 --> 02:10:39,200
第二个用途

1924
02:10:39,200 --> 02:10:41,200
更常见的用途是什么

1925
02:10:43,200 --> 02:10:47,200
是把它跟咱们的主键中的一个

1926
02:10:47,200 --> 02:10:49,200
HTML element 进行绑定

1927
02:10:50,200 --> 02:10:53,200
比如说,现在我再写一个 use ref

1928
02:10:54,200 --> 02:10:57,200
叫做 input ref

1929
02:10:57,200 --> 02:10:59,200
等于 use ref

1930
02:10:59,200 --> 02:11:01,200
好,这次我不给任何出示值

1931
02:11:01,200 --> 02:11:04,200
但是我把 input ref 放到这里

1932
02:11:05,200 --> 02:11:07,200
做一个 bounding

1933
02:11:10,200 --> 02:11:11,200
之后

1934
02:11:11,200 --> 02:11:12,200
我在下面

1935
02:11:13,200 --> 02:11:14,200
再加一个 button

1936
02:11:17,200 --> 02:11:18,200
这个 focus

1937
02:11:23,200 --> 02:11:25,200
on click

1938
02:11:28,200 --> 02:11:32,200
直接用 input ref

1939
02:11:32,200 --> 02:11:34,200
或者我们把它打出来,好吧

1940
02:11:34,200 --> 02:11:35,200
我们把它打出来,好吧

1941
02:11:35,200 --> 02:11:37,200
我们来看看里面是什么东西

1942
02:11:40,200 --> 02:11:41,200
没有问题吧

1943
02:11:44,200 --> 02:11:46,200
可没看见没有,这是什么东西

1944
02:11:46,200 --> 02:11:48,200
它说里面的值是什么

1945
02:11:49,200 --> 02:11:50,200
就是我的 input

1946
02:11:53,200 --> 02:11:54,200
相当于什么

1947
02:11:55,200 --> 02:11:59,200
相当于我把 input 跟我的 reference 进行的一个 bounding

1948
02:12:00,200 --> 02:12:03,200
现在我们的

1949
02:12:03,200 --> 02:12:07,200
input 节点就被装到了 input reference 里面了吧

1950
02:12:08,200 --> 02:12:09,200
那这里的 focus 怎么可以干嘛

1951
02:12:12,200 --> 02:12:13,200
怎么可以

1952
02:12:16,200 --> 02:12:18,200
in ref

1953
02:12:18,200 --> 02:12:19,200
点

1954
02:12:21,200 --> 02:12:23,200
应该是有个 focus 我记得是吧

1955
02:12:23,200 --> 02:12:24,200
focus

1956
02:12:24,200 --> 02:12:25,200
光尘掉用

1957
02:12:26,200 --> 02:12:28,200
没看见光标不在我的 input 上

1958
02:12:28,200 --> 02:12:29,200
但我点了 focus

1959
02:12:31,200 --> 02:12:32,200
focus 不是一个是吧

1960
02:12:32,200 --> 02:12:34,200
应该是 ref 点 current 对吧

1961
02:12:35,200 --> 02:12:36,200
点 focus

1962
02:12:37,200 --> 02:12:38,200
看见没有,是吧

1963
02:12:38,200 --> 02:12:40,200
反倒的光标是不在这里的

1964
02:12:40,200 --> 02:12:42,200
但是我点了 focus 之后

1965
02:12:43,200 --> 02:12:45,200
我的 input 就被 focus 了

1966
02:12:45,200 --> 02:12:47,200
我甚至可以在这里

1967
02:12:53,200 --> 02:12:54,200
改变它的 value

1968
02:12:56,200 --> 02:12:57,200
来

1969
02:13:01,200 --> 02:13:02,200
看见没有

1970
02:13:04,200 --> 02:13:06,200
是吧,这是 use reference 的另一个用法

1971
02:13:11,200 --> 02:13:12,200
我们一定要注意

1972
02:13:12,200 --> 02:13:14,200
直接改变

1973
02:13:14,200 --> 02:13:16,200
HTML element

1974
02:13:16,200 --> 02:13:19,200
用 reference 的方法直接改变里面的行为

1975
02:13:19,200 --> 02:13:21,200
不是一个好的 practice 里面

1976
02:13:22,200 --> 02:13:25,200
是吧,咱们尽量交给 react 去管理

1977
02:13:26,200 --> 02:13:28,200
是吧,只有极少数的情况下

1978
02:13:28,200 --> 02:13:31,200
咱们用 reference 的方法直接来改变里面的

1979
02:13:31,200 --> 02:13:33,200
value 和里面的一些属性

1980
02:13:33,200 --> 02:13:36,200
大部分的情况下是要交给 react 去管理

1981
02:13:36,200 --> 02:13:38,200
是吧,咱们是有这个选项

1982
02:13:38,200 --> 02:13:41,200
好,这就是 use reference 的第二个用法

1983
02:13:44,200 --> 02:13:46,200
use reference 的最后一个

1984
02:13:46,200 --> 02:13:48,200
第三个用法比较冷门

1985
02:13:49,200 --> 02:13:50,200
什么一个吗?

1986
02:13:50,200 --> 02:13:53,200
咱们可以用它来储存上一次

1987
02:13:53,200 --> 02:13:54,200
statement 史

1988
02:13:54,200 --> 02:13:55,200
比如说 previous name

1989
02:13:56,200 --> 02:13:57,200
本语

1990
02:13:57,200 --> 02:13:58,200
use reference

1991
02:14:01,200 --> 02:14:03,200
然后咱们再写一个 ud fact

1992
02:14:08,200 --> 02:14:09,200
这里放 name

1993
02:14:14,200 --> 02:14:16,200
然后触发一个

1994
02:14:17,200 --> 02:14:19,200
previous 点,name 点,current

1995
02:14:19,200 --> 02:14:22,200
本语来保留上一次的

1996
02:14:26,200 --> 02:14:28,200
那底下再给它加一个d

1997
02:14:30,200 --> 02:14:32,200
my name was

1998
02:14:33,200 --> 02:14:36,200
previous name 点,current

1999
02:14:42,200 --> 02:14:43,200
j 他还是空

2000
02:14:43,200 --> 02:14:45,200
i 他是 j

2001
02:14:46,200 --> 02:14:48,200
n 他是 j i

2002
02:14:51,200 --> 02:14:52,200
没问题吧

2003
02:14:59,200 --> 02:15:02,200
这就是 use reference 的三个用法

2004
02:15:02,200 --> 02:15:03,200
有什么问题吗?

2005
02:15:07,200 --> 02:15:08,200
第一个问题是

2006
02:15:09,200 --> 02:15:12,200
如果你 refreshing the page 的时候

2007
02:15:12,200 --> 02:15:14,200
你操作一下

2008
02:15:14,200 --> 02:15:17,200
randle 一下 page 它会从一跳到三对吧

2009
02:15:17,200 --> 02:15:20,200
I have render 三次才有

2010
02:15:22,200 --> 02:15:23,200
你比如说你

2011
02:15:27,200 --> 02:15:28,200
不是一次吗

2012
02:15:31,200 --> 02:15:32,200
都没意思

2013
02:15:32,200 --> 02:15:35,200
应该是这个吧,我觉得

2014
02:15:37,200 --> 02:15:38,200
应该是这个吧

2015
02:15:38,200 --> 02:15:40,200
应该是 strict mode 对吧

2016
02:15:41,200 --> 02:15:43,200
如果我们请实现这个

2017
02:15:43,200 --> 02:15:45,200
就是像 use reference 尽用来实现

2018
02:15:45,200 --> 02:15:46,200
像这样子

2019
02:15:46,200 --> 02:15:48,200
不触发 re-render

2020
02:15:49,200 --> 02:15:51,200
我们把这个 variable 直接放到

2021
02:15:51,200 --> 02:15:53,200
这个 component 外面去

2022
02:15:53,200 --> 02:15:54,200
share

2023
02:15:54,200 --> 02:15:55,200
比如说 let

2024
02:15:57,200 --> 02:15:58,200
number of

2025
02:15:58,200 --> 02:16:00,200
randles 等于

2026
02:16:00,200 --> 02:16:01,200
比如说从一开始好不好

2027
02:16:01,200 --> 02:16:02,200
我也从一开始

2028
02:16:04,200 --> 02:16:05,200
然后在这里

2029
02:16:05,200 --> 02:16:07,200
你的意思是这么去加变它

2030
02:16:08,200 --> 02:16:09,200
就新到吧

2031
02:16:09,200 --> 02:16:11,200
就不一定写在 uc effect

2032
02:16:11,200 --> 02:16:12,200
你直接写一个

2033
02:16:12,200 --> 02:16:13,200
价价

2034
02:16:13,200 --> 02:16:14,200
number of rendles 价价

2035
02:16:14,200 --> 02:16:16,200
然后 console log 它出来就可以

2036
02:16:19,200 --> 02:16:20,200
啥意思啊

2037
02:16:20,200 --> 02:16:22,200
因为它每一次 re-render 的时候

2038
02:16:22,200 --> 02:16:23,200
不都会从上到下

2039
02:16:23,200 --> 02:16:25,200
randle 就是跑一遍

2040
02:16:25,200 --> 02:16:26,200
所以我觉得

2041
02:16:26,200 --> 02:16:28,200
都没有必要放在 uc effect

2042
02:16:28,200 --> 02:16:29,200
应该可以吧

2043
02:16:30,200 --> 02:16:32,200
大家然后你说把它放到

2044
02:16:34,200 --> 02:16:35,200
车是吧

2045
02:16:35,200 --> 02:16:37,200
随意放到一个什么地方

2046
02:16:38,200 --> 02:16:39,200
是可以的

2047
02:16:39,200 --> 02:16:40,200
也是可以的

2048
02:16:40,200 --> 02:16:42,200
但是你可以看到它的 times

2049
02:16:42,200 --> 02:16:43,200
就完全不同

2050
02:16:44,200 --> 02:16:45,200
它就不是

2051
02:16:45,200 --> 02:16:47,200
加二 加二 加二 加二

2052
02:16:47,200 --> 02:16:48,200
这就是那个

2053
02:16:48,200 --> 02:16:50,200
但是我们是

2054
02:16:50,200 --> 02:16:51,200
会第一次加二

2055
02:16:51,200 --> 02:16:52,200
但后面都是加一

2056
02:16:52,200 --> 02:16:53,200
是

2057
02:16:56,200 --> 02:16:58,200
它们在性能方面有区别

2058
02:16:58,200 --> 02:17:00,200
如果请实现这个东西

2059
02:17:00,200 --> 02:17:01,200
其实是这样的

2060
02:17:01,200 --> 02:17:03,200
就是你如果是在

2061
02:17:03,200 --> 02:17:05,200
randle 当中去保住

2062
02:17:05,200 --> 02:17:06,200
一个指的话

2063
02:17:06,200 --> 02:17:08,200
基本上用的是 use-ref

2064
02:17:08,200 --> 02:17:09,200
我不都不承认你的问题

2065
02:17:09,200 --> 02:17:10,200
提的很骚

2066
02:17:10,200 --> 02:17:11,200
因为我没有想过这个方法

2067
02:17:11,200 --> 02:17:12,200
肯定是可行的是吧

2068
02:17:12,200 --> 02:17:13,200
但是它的问题是什么

2069
02:17:13,200 --> 02:17:15,200
就是它被放到组建之外

2070
02:17:15,200 --> 02:17:16,200
对

2071
02:17:16,200 --> 02:17:18,200
它其实是一个 closure 对吧

2072
02:17:19,200 --> 02:17:20,200
对的

2073
02:17:20,200 --> 02:17:21,200
应该可以

2074
02:17:21,200 --> 02:17:22,200
对 是个 closure

2075
02:17:22,200 --> 02:17:23,200
所以会

2076
02:17:23,200 --> 02:17:24,200
memory leak

2077
02:17:25,200 --> 02:17:26,200
之类的

2078
02:17:26,200 --> 02:17:27,200
我觉得这个用法

2079
02:17:27,200 --> 02:17:28,200
非常的不常用

2080
02:17:28,200 --> 02:17:29,200
我可以查一下

2081
02:17:29,200 --> 02:17:31,200
但是你这个问题还是挺骚的

2082
02:17:31,200 --> 02:17:32,200
但基本上

2083
02:17:32,200 --> 02:17:33,200
我可以直接给你结论

2084
02:17:33,200 --> 02:17:34,200
就是

2085
02:17:34,200 --> 02:17:35,200
在 rendering 之间

2086
02:17:35,200 --> 02:17:36,200
去保存一个指的话

2087
02:17:36,200 --> 02:17:38,200
还是用 use-ref 比较好

2088
02:17:39,200 --> 02:17:40,200
对吧

2089
02:17:40,200 --> 02:17:41,200
最起码别人知道你在干什么

2090
02:17:41,200 --> 02:17:42,200
是吧

2091
02:17:42,200 --> 02:17:43,200
因为它是个通常用吧

2092
02:17:44,200 --> 02:17:46,200
然后我见过就是

2093
02:17:46,200 --> 02:17:48,200
把指保存在外面的时候

2094
02:17:48,200 --> 02:17:49,200
一般来讲

2095
02:17:49,200 --> 02:17:50,200
比如说我有个

2096
02:17:50,200 --> 02:17:52,200
真正的不懂的 const

2097
02:17:52,200 --> 02:17:53,200
放在外面

2098
02:17:53,200 --> 02:17:54,200
那很正常

2099
02:17:54,200 --> 02:17:55,200
对

2100
02:17:55,200 --> 02:17:56,200
为什么

2101
02:17:56,200 --> 02:17:57,200
那是因为你把 const 放在外面的话

2102
02:17:57,200 --> 02:17:58,200
它每一次渲染的时候

2103
02:17:58,200 --> 02:17:59,200
不会再重新的去什么

2104
02:17:59,200 --> 02:18:00,200
去分配内存

2105
02:18:00,200 --> 02:18:02,200
去把你的 const 保存在外面

2106
02:18:02,200 --> 02:18:03,200
去把你的 const 跑一遍

2107
02:18:03,200 --> 02:18:04,200
对吧

2108
02:18:04,200 --> 02:18:05,200
里头上你会节省

2109
02:18:05,200 --> 02:18:06,200
那么一丢丢的性能

2110
02:18:06,200 --> 02:18:07,200
对吧

2111
02:18:08,200 --> 02:18:09,200
那那种情况下

2112
02:18:09,200 --> 02:18:10,200
我们也可以用 use-ref

2113
02:18:10,200 --> 02:18:11,200
来保存这个职业

2114
02:18:12,200 --> 02:18:13,200
你可以

2115
02:18:13,200 --> 02:18:14,200
也可以

2116
02:18:14,200 --> 02:18:15,200
没有区别

2117
02:18:15,200 --> 02:18:16,200
对的

2118
02:18:16,200 --> 02:18:17,200
是可以的

2119
02:18:17,200 --> 02:18:18,200
但是不是会更麻烦吗

2120
02:18:18,200 --> 02:18:19,200
知道

2121
02:18:19,200 --> 02:18:20,200
如果你只是定一个

2122
02:18:20,200 --> 02:18:21,200
产量的话

2123
02:18:21,200 --> 02:18:22,200
对吧

2124
02:18:22,200 --> 02:18:23,200
直接写在外面

2125
02:18:23,200 --> 02:18:24,200
写 const 更好

2126
02:18:28,200 --> 02:18:29,200
是吧

2127
02:18:29,200 --> 02:18:30,200
你的问题更多是

2128
02:18:30,200 --> 02:18:31,200
探讨

2129
02:18:31,200 --> 02:18:32,200
use-ref

2130
02:18:33,200 --> 02:18:34,200
对

2131
02:18:34,200 --> 02:18:35,200
我就是

2132
02:18:35,200 --> 02:18:37,200
但是针对于 use-ref 本身

2133
02:18:37,200 --> 02:18:38,200
能用来干吗

2134
02:18:38,200 --> 02:18:39,200
你应该是没有问题的

2135
02:18:39,200 --> 02:18:40,200
对吧

2136
02:18:40,200 --> 02:18:41,200
对

2137
02:18:41,200 --> 02:18:42,200
对吧

2138
02:18:50,200 --> 02:18:51,200
别的同学呢

2139
02:18:53,200 --> 02:18:54,200
老师

2140
02:18:54,200 --> 02:18:55,200
问一下

2141
02:18:55,200 --> 02:18:57,200
这几个 hoax

2142
02:18:57,200 --> 02:18:58,200
实际开发当中

2143
02:18:58,200 --> 02:19:00,200
哪个用的比较多

2144
02:19:00,200 --> 02:19:02,200
这么多的当中

2145
02:19:02,200 --> 02:19:03,200
就是

2146
02:19:03,200 --> 02:19:05,200
哪个场景用的比较多呢

2147
02:19:05,200 --> 02:19:06,200
都挺多的

2148
02:19:06,200 --> 02:19:07,200
那 use-memo 用的

2149
02:19:07,200 --> 02:19:08,200
都是因为

2150
02:19:08,200 --> 02:19:09,200
在程序当中

2151
02:19:09,200 --> 02:19:10,200
你一定会有一些

2152
02:19:10,200 --> 02:19:11,200
比较复杂

2153
02:19:11,200 --> 02:19:13,200
比较昂贵的计算

2154
02:19:15,200 --> 02:19:16,200
那这些计算的话

2155
02:19:16,200 --> 02:19:17,200
在没有必要的时候

2156
02:19:17,200 --> 02:19:18,200
你是不想触犯

2157
02:19:18,200 --> 02:19:19,200
它重新计算的

2158
02:19:19,200 --> 02:19:20,200
因为它耗时

2159
02:19:20,200 --> 02:19:21,200
对吧

2160
02:19:21,200 --> 02:19:22,200
所以 use-memo 用的比较

2161
02:19:22,200 --> 02:19:23,200
都是这种情况

2162
02:19:24,200 --> 02:19:26,200
然后在 use-effect 当中

2163
02:19:27,200 --> 02:19:28,200
我们在做

2164
02:19:28,200 --> 02:19:30,200
referential check 的时候

2165
02:19:31,200 --> 02:19:33,200
为了规避 use-effect

2166
02:19:33,200 --> 02:19:34,200
没必要的去跑

2167
02:19:34,200 --> 02:19:36,200
use-callback 也挺多的

2168
02:19:37,200 --> 02:19:39,200
但 use-callback 你要记住一点

2169
02:19:39,200 --> 02:19:40,200
你也不能随便用 是吧

2170
02:19:40,200 --> 02:19:42,200
因为 function 里面

2171
02:19:42,200 --> 02:19:44,200
是可以包 closure 对不对

2172
02:19:44,200 --> 02:19:46,200
你用了 use-callback 之后

2173
02:19:46,200 --> 02:19:47,200
你外面 closure 索紧

2174
02:19:47,200 --> 02:19:48,200
用的那一个东西

2175
02:19:48,200 --> 02:19:49,200
如果它的直变了

2176
02:19:50,200 --> 02:19:52,200
你的 use-callback 里面的那个

2177
02:19:52,200 --> 02:19:53,200
function 里面

2178
02:19:53,200 --> 02:19:54,200
拿的还是就职

2179
02:19:54,200 --> 02:19:55,200
你明白我的意思吗

2180
02:19:57,200 --> 02:19:58,200
有点绕

2181
02:19:59,200 --> 02:20:01,200
拿的还是就职

2182
02:20:01,200 --> 02:20:03,200
比如说 这里是一个 function 对不对

2183
02:20:03,200 --> 02:20:04,200
对

2184
02:20:04,200 --> 02:20:05,200
对吧

2185
02:20:05,200 --> 02:20:06,200
那这个 render 是它外面的东西吧

2186
02:20:07,200 --> 02:20:08,200
对

2187
02:20:08,200 --> 02:20:09,200
是不是就形成了一个 closure

2188
02:20:11,200 --> 02:20:12,200
OK

2189
02:20:12,200 --> 02:20:13,200
对吧

2190
02:20:13,200 --> 02:20:14,200
如果你把这个

2191
02:20:14,200 --> 02:20:15,200
我只举例子

2192
02:20:15,200 --> 02:20:16,200
你把这个 function

2193
02:20:16,200 --> 02:20:18,200
用 callback 给它包起来

2194
02:20:18,200 --> 02:20:20,200
当外面的 render 只改变了之后

2195
02:20:20,200 --> 02:20:21,200
你里面是不会更新的

2196
02:20:21,200 --> 02:20:22,200
除非你把它作为

2197
02:20:22,200 --> 02:20:23,200
dipendency 丢进去

2198
02:20:27,200 --> 02:20:28,200
明白

2199
02:20:31,200 --> 02:20:32,200
对 反正

2200
02:20:33,200 --> 02:20:34,200
最常用的

2201
02:20:34,200 --> 02:20:35,200
应该是 use-meme

2202
02:20:35,200 --> 02:20:36,200
如果实际性要分类的话

2203
02:20:36,200 --> 02:20:38,200
应该是 use-meme 用的最多

2204
02:20:39,200 --> 02:20:40,200
然后是 use-meme

2205
02:20:40,200 --> 02:20:41,200
然后是 use-callback

2206
02:20:42,200 --> 02:20:43,200
但你这个问题也很难回答

2207
02:20:43,200 --> 02:20:45,200
因为很看项目 是吧

2208
02:20:45,200 --> 02:20:46,200
了解

2209
02:20:46,200 --> 02:20:47,200
很看项目 特别看项目

2210
02:20:49,200 --> 02:20:50,200
什么项目

2211
02:20:50,200 --> 02:20:51,200
什么项目会有

2212
02:20:51,200 --> 02:20:53,200
特别多的数据

2213
02:20:53,200 --> 02:20:55,200
就是要用這個 use-meme

2214
02:20:56,200 --> 02:20:57,200
基本上

2215
02:20:57,200 --> 02:20:58,200
项目大了之后

2216
02:20:58,200 --> 02:20:59,200
其实都会吧

2217
02:21:04,200 --> 02:21:04,200


2218
02:21:04,200 --> 02:21:05,200
很多时候

2219
02:21:05,200 --> 02:21:06,200
你看用 use-meme

2220
02:21:06,200 --> 02:21:07,200
和 use-callback

2221
02:21:07,200 --> 02:21:09,200
你不用也行

2222
02:21:09,200 --> 02:21:10,200
因为现在来说的话

2223
02:21:10,200 --> 02:21:11,200
用户的

2224
02:21:11,200 --> 02:21:12,200
不管用手机浏览

2225
02:21:12,200 --> 02:21:13,200
还是用电脑浏览

2226
02:21:13,200 --> 02:21:14,200
其实计判性能都很强大

2227
02:21:14,200 --> 02:21:15,200
咱们的网络环境

2228
02:21:15,200 --> 02:21:16,200
也很好 是吧

2229
02:21:18,200 --> 02:21:19,200
用户可能体会不出来

2230
02:21:19,200 --> 02:21:20,200
但是咱们在写的时候

2231
02:21:20,200 --> 02:21:21,200
尽量是吧

2232
02:21:21,200 --> 02:21:22,200
它的性能往优的去写

2233
02:21:22,200 --> 02:21:23,200
这没问题吧

2234
02:21:24,200 --> 02:21:25,200
所以说你很主观的

2235
02:21:25,200 --> 02:21:26,200
认为这个东西

2236
02:21:26,200 --> 02:21:28,200
需要更长的时间处理

2237
02:21:28,200 --> 02:21:29,200
它可能会造成

2238
02:21:29,200 --> 02:21:30,200
一些 performance issue的话

2239
02:21:30,200 --> 02:21:31,200
你应该在写的时候

2240
02:21:31,200 --> 02:21:32,200
去考虑到这一点

2241
02:21:32,200 --> 02:21:33,200
是吧

2242
02:21:33,200 --> 02:21:34,200
就尽量去规避

2243
02:21:34,200 --> 02:21:35,200
它的 performance issue

2244
02:21:37,200 --> 02:21:38,200
了解

2245
02:21:40,200 --> 02:21:41,200
而且同学还有问

2246
02:21:41,200 --> 02:21:42,200
他说可以讲一下

2247
02:21:42,200 --> 02:21:43,200
react18更新的 hook吗

2248
02:21:44,200 --> 02:21:45,200
除了我们

2249
02:21:45,200 --> 02:21:46,200
我们现在用到的这些 hook

2250
02:21:46,200 --> 02:21:47,200
来看一下是吧

2251
02:21:47,200 --> 02:21:49,200
比如说react

2252
02:21:50,200 --> 02:21:51,200
hooks

2253
02:21:51,200 --> 02:21:52,200
cubentation

2254
02:21:55,200 --> 02:21:56,200
在这里是吧

2255
02:21:56,200 --> 02:21:57,200
不 网上的话

2256
02:21:57,200 --> 02:21:58,200
这个use state

2257
02:21:58,200 --> 02:21:59,200
use effect

2258
02:21:59,200 --> 02:21:59,200


2259
02:21:59,200 --> 02:22:00,200
我们全部讲完了

2260
02:22:00,200 --> 02:22:01,200
对吧

2261
02:22:01,200 --> 02:22:01,200


2262
02:22:01,200 --> 02:22:02,200
use call out

2263
02:22:02,200 --> 02:22:03,200
use memo

2264
02:22:03,200 --> 02:22:03,200


2265
02:22:03,200 --> 02:22:04,200
也全部讲完了吧

2266
02:22:04,200 --> 02:22:05,200
其他这些

2267
02:22:05,200 --> 02:22:06,200
说实话

2268
02:22:06,200 --> 02:22:07,200
我自己

2269
02:22:07,200 --> 02:22:08,200
除了use transition

2270
02:22:08,200 --> 02:22:09,200
是叫什么

2271
02:22:09,200 --> 02:22:10,200
animation的时候用的

2272
02:22:10,200 --> 02:22:11,200
其他的东西

2273
02:22:11,200 --> 02:22:12,200
我在项目当中

2274
02:22:12,200 --> 02:22:14,200
基本上一个都没看到过

2275
02:22:14,200 --> 02:22:15,200
我真正的讲

2276
02:22:19,200 --> 02:22:21,200
这些不太常用

2277
02:22:21,200 --> 02:22:22,200
而且你去看文档的话

2278
02:22:22,200 --> 02:22:24,200
你会发现他们也非常的简单

2279
02:22:24,200 --> 02:22:25,200
是吧

2280
02:22:25,200 --> 02:22:27,200
整个文档关于他的描述

2281
02:22:27,200 --> 02:22:28,200
就这么多

2282
02:22:30,200 --> 02:22:31,200
你说这东西

2283
02:22:31,200 --> 02:22:32,200
你刻后再不去读一读

2284
02:22:32,200 --> 02:22:34,200
是不是有点说不过去

2285
02:22:39,200 --> 02:22:40,200
是吧

2286
02:22:40,200 --> 02:22:41,200
其他的 hook

2287
02:22:41,200 --> 02:22:43,200
可以刻后看一下就可以了

2288
02:22:43,200 --> 02:22:44,200
非常的不常用

2289
02:22:45,200 --> 02:22:46,200
别的同学呢

2290
02:22:52,200 --> 02:22:53,200
面试中不会问到

2291
02:22:53,200 --> 02:22:55,200
百分之九十的情况下

2292
02:22:55,200 --> 02:22:56,200
不会问到这些东西

2293
02:22:56,200 --> 02:22:57,200
这些

2294
02:22:57,200 --> 02:22:58,200
要问后就问这些

2295
02:22:58,200 --> 02:22:59,200
一般后可以问什么

2296
02:22:59,200 --> 02:23:01,200
问use effect

2297
02:23:02,200 --> 02:23:03,200
问use callback

2298
02:23:03,200 --> 02:23:04,200
use memo

2299
02:23:04,200 --> 02:23:05,200
use wrap

2300
02:23:05,200 --> 02:23:06,200
这些是问得最多的

2301
02:23:06,200 --> 02:23:07,200
这些比较少吧

2302
02:23:11,200 --> 02:23:12,200
绕头

2303
02:23:13,200 --> 02:23:14,200
是吧

2304
02:23:14,200 --> 02:23:15,200
同学们你们现在学到的

2305
02:23:15,200 --> 02:23:16,200
所有 hook

2306
02:23:16,200 --> 02:23:17,200
就是后当中的最难的了

2307
02:23:17,200 --> 02:23:18,200
已经是吧

2308
02:23:18,200 --> 02:23:19,200
最复杂的

2309
02:23:19,200 --> 02:23:20,200
后面的这些 hook

2310
02:23:20,200 --> 02:23:21,200
也可以读一读文档

2311
02:23:21,200 --> 02:23:22,200
都非常的简单

2312
02:23:26,200 --> 02:23:27,200
其他同学呢

2313
02:23:27,200 --> 02:23:28,200
还有什么问题吗

2314
02:23:30,200 --> 02:23:31,200
L.A.老师

2315
02:23:31,200 --> 02:23:32,200
我来问个问题

2316
02:23:32,200 --> 02:23:33,200
那个

2317
02:23:33,200 --> 02:23:34,200
就是我在

2318
02:23:34,200 --> 02:23:35,200
先问个基础的问题

2319
02:23:35,200 --> 02:23:37,200
就是 local state

2320
02:23:37,200 --> 02:23:38,200
state 的值得改变

2321
02:23:38,200 --> 02:23:40,200
会触发这个

2322
02:23:40,200 --> 02:23:41,200
component

2323
02:23:41,200 --> 02:23:42,200
重新宣传

2324
02:23:42,200 --> 02:23:43,200
对吧

2325
02:23:43,200 --> 02:23:44,200
对

2326
02:23:44,200 --> 02:23:46,200
还有 user wrap

2327
02:23:46,200 --> 02:23:47,200
为什么

2328
02:23:47,200 --> 02:23:49,200
它这三个功能

2329
02:23:49,200 --> 02:23:51,200
这么毫不相关的一个

2330
02:23:51,200 --> 02:23:53,200
毫不相关

2331
02:23:53,200 --> 02:23:54,200
就是一个访问

2332
02:23:54,200 --> 02:23:55,200
这个dome的元素

2333
02:23:55,200 --> 02:23:57,200
我一个是可以

2334
02:23:57,200 --> 02:23:59,200
可以是

2335
02:24:00,200 --> 02:24:02,200
可以是不重新

2336
02:24:02,200 --> 02:24:03,200
连现在的意思

2337
02:24:03,200 --> 02:24:04,200
对

2338
02:24:04,200 --> 02:24:05,200
首先

2339
02:24:05,200 --> 02:24:06,200
这两个东西是

2340
02:24:06,200 --> 02:24:07,200
高度相关的吧

2341
02:24:08,200 --> 02:24:10,200
我来存上一个state

2342
02:24:10,200 --> 02:24:11,200
和我来保存一个东西

2343
02:24:11,200 --> 02:24:12,200
在重新宣传当中

2344
02:24:12,200 --> 02:24:13,200
把它保存

2345
02:24:13,200 --> 02:24:14,200
可以是这两个是相关的

2346
02:24:14,200 --> 02:24:15,200
对不对

2347
02:24:16,200 --> 02:24:17,200
对

2348
02:24:17,200 --> 02:24:18,200
是吧

2349
02:24:18,200 --> 02:24:19,200
这个你感觉上不太相关

2350
02:24:19,200 --> 02:24:20,200
对不对

2351
02:24:22,200 --> 02:24:23,200
对

2352
02:24:23,200 --> 02:24:24,200
是吧

2353
02:24:24,200 --> 02:24:25,200
ok 你这么想

2354
02:24:26,200 --> 02:24:28,200
wrap 是一个什么

2355
02:24:32,200 --> 02:24:33,200
wrap 是一个什么

2356
02:24:34,200 --> 02:24:36,200
wrap 是一个 input

2357
02:24:36,200 --> 02:24:37,200
给我的一个自己的 attribute

2358
02:24:37,200 --> 02:24:38,200
这个没有问题吧

2359
02:24:38,200 --> 02:24:39,200
是存在于input当中的

2360
02:24:39,200 --> 02:24:40,200
对吧

2361
02:24:40,200 --> 02:24:41,200
是dome里面的一个东西

2362
02:24:41,200 --> 02:24:42,200
是吧

2363
02:24:42,200 --> 02:24:44,200
是note element里面的一个东西

2364
02:24:44,200 --> 02:24:45,200
没有问题吧

2365
02:24:47,200 --> 02:24:48,200
好

2366
02:24:48,200 --> 02:24:49,200
然后你wrap 等于input

2367
02:24:49,200 --> 02:24:50,200
wrap 相当于什么

2368
02:24:50,200 --> 02:24:52,200
相当于复植给它了吧

2369
02:24:54,200 --> 02:24:55,200
对

2370
02:24:55,200 --> 02:24:57,200
然后你复的这个植

2371
02:24:57,200 --> 02:24:59,200
它在每次渲染当中是不变的

2372
02:24:59,200 --> 02:25:01,200
那你不就可以调用这个植

2373
02:25:01,200 --> 02:25:02,200
来去调用它的wrap

2374
02:25:02,200 --> 02:25:04,200
你这么理解不就好了吗

2375
02:25:08,200 --> 02:25:09,200
你听懂我意思吗

2376
02:25:09,200 --> 02:25:12,200
ok 这么是琢磨出来的是吧

2377
02:25:13,200 --> 02:25:14,200
你相当于什么

2378
02:25:14,200 --> 02:25:16,200
把wrap 的植复给input

2379
02:25:17,200 --> 02:25:18,200
做了一个绑定

2380
02:25:19,200 --> 02:25:21,200
并且这个植在每次re-render

2381
02:25:21,200 --> 02:25:22,200
当中它不会丢掉

2382
02:25:22,200 --> 02:25:23,200
它会cache 在那里

2383
02:25:23,200 --> 02:25:24,200
保存在那里

2384
02:25:28,200 --> 02:25:29,200
ok

2385
02:25:30,200 --> 02:25:31,200
你可以这么理解是吧

2386
02:25:32,200 --> 02:25:33,200
好的 谢谢

2387
02:25:34,200 --> 02:25:35,200
所以就是wrap 比较知道是吧

2388
02:25:35,200 --> 02:25:37,200
比如说大家说我今天听懂了

2389
02:25:37,200 --> 02:25:38,200
我估计如果你们不用的话

2390
02:25:38,200 --> 02:25:39,200
可能过两周又忘了

2391
02:25:41,200 --> 02:25:43,200
但是wrap 确实就是比较少一点

2392
02:25:45,200 --> 02:25:46,200
大家记住它

2393
02:25:46,200 --> 02:25:47,200
它两个用法

2394
02:25:47,200 --> 02:25:48,200
一个是用来保存一个植

2395
02:25:48,200 --> 02:25:49,200
在 rendering 当中

2396
02:25:50,200 --> 02:25:51,200
另外是跟什么

2397
02:25:51,200 --> 02:25:52,200
跟咱们的这个

2398
02:25:53,200 --> 02:25:54,200
还是这样吧

2399
02:25:54,200 --> 02:25:55,200
Element的wrap 做一个网定

2400
02:26:01,200 --> 02:26:03,200
参与dom的什么

2401
02:26:03,200 --> 02:26:04,200
改变是吧

2402
02:26:04,200 --> 02:26:05,200
这同学发了一个东西

2403
02:26:05,200 --> 02:26:06,200
看看什么东西

2404
02:26:07,200 --> 02:26:08,200
对吧

2405
02:26:12,200 --> 02:26:13,200
没问题吧

2406
02:26:17,200 --> 02:26:18,200
wrap 还挺重要的

2407
02:26:18,200 --> 02:26:19,200
一定要理解

2408
02:26:19,200 --> 02:26:20,200
面试中是非常常考的一个东西

2409
02:26:26,200 --> 02:26:27,200
别的东西还有什么问题吗

2410
02:26:34,200 --> 02:26:35,200
没有什么问题的话

2411
02:26:35,200 --> 02:26:36,200
可以结束今天的课程

2412
02:26:36,200 --> 02:26:38,200
今天也是我们的最后一节课

2413
02:26:50,200 --> 02:26:51,200
OK 那么祝同学们

2414
02:26:52,200 --> 02:26:53,200
以后的

2415
02:26:55,200 --> 02:26:56,200
找工作也好

2416
02:26:56,200 --> 02:26:57,200
商案也好

2417
02:26:57,200 --> 02:26:58,200
girtlock 好吧

2418
02:26:58,200 --> 02:26:59,200
遲早商案

2419
02:27:06,200 --> 02:27:07,200
谢谢大家

2420
02:27:08,200 --> 02:27:09,200
我这里停止录并
